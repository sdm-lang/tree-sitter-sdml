#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Implementation and Tools

Figure [[fig:model-transforms]] gave a high-level overview of transformations, this section will expand not only on
transforms but also the other capabilities of the tooling for SDML.

One element that is not included in figure [[fig:sdml-overview]], as it is primarily an implementation decision, is that the
reference implementation for SDML is provided as a Tree-Sitter[fn:ts] package. While generated tree-sitter parsers are
not intended to be fast, or to be part of a compilation processes they do provide a multitude of language bindings, and
a concrete syntax tree allowing easy development of the relatively simple tools required for SDML usage.

As such the much expanded figure
[[fig:implementation-overview]] shows the 

#+NAME: fig:implementation-overview
#+BEGIN_SRC dot :file implementation-overview.svg :exports results
digraph G {
    bgcolor="transparent";
    rankdir="TB";
    fontname="Helvetica,Arial,sans-serif";
    node [fontname="Helvetica,Arial,sans-serif"; fontsize=10];

    subgraph cluster_0 {
        label = "Core Library";
        grammar [label="Grammar\nDefinition"];
        parser [label="Parser\nDylib"];
        rust [label="Rust\nBindings"];
        npm [label="Node\nBindings"];
        wasm [label="WASM\nBindings"];

        grammar -> parser;
        parser -> rust;
        parser -> npm;
        parser -> wasm;
    }

    treesit [shape=component; label="Tree-Sitter\nC Library"; color="dimgrey"; fontcolor="dimgrey";];
    treesit -> grammar;

    subgraph cluster_1 {
        label = "Emacs Support";
        emode [label="Editing Mode"];
        spell [label="Spell Checker"];
        flycheck [label="Flycheck"];
        emode -> spell;
        emode -> flycheck;

        parser -> emode;
    }

    ets [shape=component; label="Emacs\nTree-Sitter"; color="dimgrey"; fontcolor="dimgrey";];
    ets_hl [shape=component; label="Tree-Sitter\nHighlighter"; color="dimgrey"; fontcolor="dimgrey";];
    ets_indent [shape=component; label="Tree-Sitter\nIndenter"; color="dimgrey"; fontcolor="dimgrey";];
    ets_fold [shape=component; label="Tree-Sitter\nFolder"; color="dimgrey"; fontcolor="dimgrey";];

    treesit -> ets;
    ets -> ets_hl;
    ets -> ets_indent;
    ets -> ets_fold;

    ets_hl -> emode;
    ets_indent -> emode;
    ets_fold -> emode;

    subgraph cluster_2 {
        label = "Command-Line Tool";
        api [label="API"];
        fmt [label="Formatter"];
        linter [label="Linter"];
        diagrams [label="Diagrammer"];

        rust -> api;
        api -> fmt;
        api -> linter;
        api -> diagrams;
    }
}
#+END_SRC
 
#+CAPTION: Implementation Overview
#+RESULTS: fig:implementation-overview
[[file:implementation-overview.svg]]

** Parser (tree-sitter) Library

- Source at [[https://github.com/johnstonskj/tree-sitter-sdml][Github]]

Build.

#+BEGIN_EXAMPLE
git clone https://github.com/johnstonskj/tree-sitter-sdml
#+END_EXAMPLE

#+BEGIN_EXAMPLE
make setup
#+END_EXAMPLE

#+BEGIN_EXAMPLE
make build
#+END_EXAMPLE

*Bindings:*

- Node binding, published to [[https://www.npmjs.com/package/tree-sitter-sdml][npm.js]]
- Rust binding, published to [[https://crates.io/crates/tree-sitter-sdml][crates.io]]

** Rust Libraries


Crates:
  
- [[https://crates.io/crates/sdml-core][sdml-core]] :: The in-memory model of the SDML language.
- [[https://crates.io/crates/sdml-parse][sdml-parse]] :: The parser that relies on the tree-sitter parser above to
  create the in-memory model defined in ~sdml-core~.
- [[https://crates.io/crates/sdml-generate][sdml-generate]] :: The set of generators and transformers using the
  ~sdml-core~ in-memory model as the source.
- [[https://crates.io/crates/sdml-cli][sdml-cli]] :: The command-line tool that parses existing models and executes
  generators.

The source is in the Github repository [[https://github.com/johnstonskj/rust-sdml][rust-sdml]].

** Transformations

TBD

** Command-Line Tool

Install is simple using the =cargo= command. If you do not have cargo installed you can follow the standard /rustup/
directions[fn:cargo] or use the Homebrew[fn:brew] or equivalent package manager.

#+BEGIN_EXAMPLE
cargo install sdml
#+END_EXAMPLE

Once installed the option =--help= or the command =help= will guide you through the commands available.

#+BEGIN_EXAMPLE
$ sdml --help
Rust CLI for Simple Domain Modeling Language (SDML)

Usage: sdml [OPTIONS] <COMMAND>

Commands:
  highlight  Highlight file
  tags       Extract tags from file
  convert    Convert model files into other formats
  draw       Draw diagrams from models
  help       Print this message or the help of the given subcommand(s)

Options:
  -v, --verbose...  More output per occurrence
  -q, --quiet...    Less output per occurrence
  -h, --help        Print help
  -V, --version     Print version
#+END_EXAMPLE

For most commands the tool accepts a pair of arguments that determine the format and location of the generated output.
These commands =--output-format= / =-f= and =--output-file= / =-o= can be used in the following manner.

#+BEGIN_EXAMPLE
--output-format svg --output-file rentals.svg
-output-file rentals.svg
#+END_EXAMPLE

In the second example above the format is not specified and so the tool will use the extension of the output file as the
format specifier. If the output file is not specified the output is written to stdout. If neither argument is provided
the output is written to stdout in the default format.

Similarly most tools use the module resolution rules for loading a module and so the input *file* is actually specified
as a module name. To allow for searches in non-standard locations the argument =--base-path= / =-b= can be used to
prepend a path to the standard search path. Thus the two examples below are identical as the current directory is always
a component of the search path.

#+BEGIN_EXAMPLE
--base-path . rentals
rentals
#+END_EXAMPLE

*** Highlighting

#+BEGIN_EXAMPLE
$ sdlml highlight --help
Highlight an SDML source file

Usage: sdml highlight [OPTIONS] <MODULE>

Arguments:
  <MODULE>
          SDML module to convert

Options:
  -f, --output-format <OUTPUT_FORMAT>
          Format to convert into
          
          [default: ansi]

          Possible values:
          - ansi:            ANSI escape for console
          - html:            HTML pre-formatted element
          - html-standalone: HTML stand-alone document

  -v, --verbose...
          More output per occurrence

  -o, --output-file <OUTPUT_FILE>
          File name to write to, if not provided will write to stdout

  -q, --quiet...
          Less output per occurrence

  -b, --base-path <BASE_PATH>
          The path to use as the IRI base for modules

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
#+END_EXAMPLE

For the console this uses ANSI escape sequences to format the text. 

#+BEGIN_EXAMPLE
sdml highlight --output-format ansi rentals
#+END_EXAMPLE

To generate formatted and highlighted HTML the tool accepts two different format specifiers, =html= for simply a block
of HTML that can be inserted into another document, or =html-standalone= to generate a full document around the
highlighted code block.

#+BEGIN_EXAMPLE
sdml highlight --output-format html rentals
sdml highlight --output-format html-standalone rentals
#+END_EXAMPLE

*** Draw Diagrams

To draw a high-level Concepts diagram, use the diagram specifier =concepts=. To generate an image file you need to install
Graphviz[fn:gviz].

#+BEGIN_EXAMPLE
sdml draw --diagram concepts \
          --output-format svg --output-file rentals.svg \
          --base-path . rentals
#+END_EXAMPLE

For more detail an Entity-Relationship diagram can be generated with the diagram specifier =entity-relationship=. To
generate an image file you need to install Graphviz[fn:gviz].

#+BEGIN_EXAMPLE
sdml draw --diagram entity-relationship \
          --output-format svg --output-file rentals.svg \
          --base-path . rentals
#+END_EXAMPLE

For the mose detail a UML Class diagram can be generated with the diagram specifier =uml-class=. The generated diagram
applies the profile outlined in appendix [[app:uml-profile]]. To generate an image file you need to install
PlantUML[fn:puml].

#+BEGIN_EXAMPLE
sdml draw --diagram uml-class \
          --output-format svg --output-file rentals.svg \
          --base-path . rentals
#+END_EXAMPLE

*** Module Resolution

A particular module =rentals= is resolved by looking for the module name first with the ".sdm" and then the ".sdml"
extension. If neither of these exist the same pair will be checked within a directory named =rentals=. So in total the
following four file paths are checked.

#+BEGIN_EXAMPLE
{prefix}rentals.sdm
{prefix}rentals.sdml
{prefix}rentals/rentals.sdm
{prefix}rentals/rentals.sdml
#+END_EXAMPLE

The purpose of the variable ={prefix}= is to allow the resolver to use an environment variable, =SDML_PATH=, to find and
load module files. Each path within the variable is used as a prefix in turn. The command line option =base-path= allows
you to prepend a value to the =SDML_PATH= list for just this command. In the following example:

#+BEGIN_EXAMPLE
SDML_PATH=lib/sdml sdml highlight --base-path ./examples rentals
#+END_EXAMPLE

The list of file paths to check are:

#+BEGIN_EXAMPLE
lib/sdml/rentals.sdm
lib/sdml/rentals.sdml
lib/sdml/rentals/rentals.sdm
lib/sdml/rentals/rentals.sdml
./examples/rentals.sdm
./examples/rentals.sdml
./examples/rentals/rentals.sdm
./examples/rentals/rentals.sdml
#+END_EXAMPLE

This same resolution mechanism is used for all imported values, in the following example each module =skos=, =other=, and
=more=. With one exception, the module =skos= is known to the sdml command and it uses an internal representation.

#+BEGIN_SRC sdml :exports code :noeval
module subDomain is

  import skos:prefLabel
  import other:Something
  import more

end
#+END_SRC

** Emacs Support

Emacs has been the primary /playground/ for SDML and as such has some tools already built for editing and documentation.
The package [[https://github.com/johnstonskj/emacs-sdml-mode][sdml-mode]] (currently not in any package repository) is associated with any file ending in =.sdm= or =.sdml= with
highlighting and indentation support. Follow the installation instructions on the package site.

Emacs standard customization allows for managing all package variables and can be accessed via:

=M-x customize-group RET sdml RET=

*** Highlighting

Syntax highlighting is enabled by the =tree-sitter-hl-mode= minor mode based on the configuration in the constant
=sdml-mode-tree-sitter-hl-patterns=. The highlighting also carries over into Org Babel source blocks and into generated
content such as this documentation.

The =sdml-mode= also adds to the =prettify-symbols-alist= list, the set of symbols is in the custom variable
=sdml-prettify-symbols-alist=.

*** Indentation

Line indentation is enabled by the =tree-sitter-indent-mode= minor mode based on the configuration in the constant
=sdml-mode-folding-definitions=.

Default indentation is two spaces, although this can be overridden by the custom variable =sdml-indent-offset=.

*** Code Folding

Block Folding is provided by the =ts-fold-mode= minor mode based on the configuration in the constant
=tree-sitter-indent-sdml-scopes=. Note that folding of groups of line comments is also supported.

- =C-c C-s -= -- fold item
- =C-c C-s += -- unfold item
- =C-c C-s C--= -- fold all items in buffer
- =C-c C-s C-+= -- unfold all items in buffer
- =C-c C-s /= -- unfold item and all children
- =C-c C-s .= -- toggle fold/unfold state

As well as the mechanics of folding, the =ts-fold= package also has indicator support for windowed clients and this is
enabled by default with =window-system= is non-nil.

*** Debugging

The following two comands are provided by the underlying =tree-sitter= package, but exposed here with the common key
prefix.

- =C-c C-s d= -- open the tree-sitter debug view
- =C-c C-s q= -- open the tree-sitter query builder

*** Ispell

The additional package =sdml-ispell= provides *selective* spell checking by only checking selected nodes in the tree.

- =C-c C-s s= -- spell check the item at point
- =C-c C-s C-s= -- spell check all items in the buffer

By default only strings and comments will be checked, although this can be overridden by the custom variable
=tree-sitter-ispell-sdml-text-mapping=.

*** Flycheck

The additional package =flycheck-sdml= provides on-the-fly linting for SDML buffers. To enable, simply ensure Flycheck
mode is enabled for your buffer. Rather than per-buffer, you can enable this by setting =flycheck-mode= for all SDML files
with a hook.

The entire set of lint rules are stored in the custom variable =sdml-lint-rules= with the form:

#+BEGIN_SRC emacs-lisp
'(rule-id "Issue message" level "tree-sitter query")
#+END_SRC

For example, the following rule returns the name of the module, but only if the first character is an upper case letter.
This is marked as a warning by Flycheck and provided with the necessary message.

#+BEGIN_SRC emacs-lisp
'(module-name-case
  "Module names may not start with upper-case"
  warning
  "((module name: (identifier) @name) (#match? @name \"^[:upper:]\"))")
#+END_SRC

*** Org-Babel

Org-Babel support provides the ability to call the SDML [[https://github.com/johnstonskj/rust-sdml][command-line tool]] to produce diagrams and more. For example, the
following source block calls the CLI to draw a concept diagram for the enclosed module. It is worth noting that this
documentation has been generated, including all source highlighting and diagrams, from an Org-mode document with Babel.

#+BEGIN_EXAMPLE
#+NAME: lst:rentals-example
#+CAPTION: Rentals Concepts
#+BEGIN_SRC sdml :cmdline draw --diagram concepts :file ./rentals-concepts.svg :exports both
module rentals is

  entity Vehicle
  entity Location
  entity Customer
  entity Booking

end
#+END_SRC
#+END_EXAMPLE

The results block then references the resulting image.

#+BEGIN_EXAMPLE
#+NAME: fig:rentals-example-concepts
#+CAPTION: Rentals Concepts
#+RESULTS: lst:rentals-example
[[file:./rentals-concepts.svg]]
#+END_EXAMPLE

But, what if we want to produce more than one diagram from the same source? By using the built-in
/[[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb]]/ syntax we can create a new source block, but
reference the original content. This source block has different command-line parameters and has it's own results block
as well.

#+BEGIN_EXAMPLE
#+NAME: fig:rentals-example-erd
#+BEGIN_SRC sdml :cmdline draw --diagram concepts :file ./rentals-erd.svg :exports results :noweb yes
<<lst:rentals-example>>
#+END_SRC
#+END_EXAMPLE

** Neovim

[[https://neovim.io/][Neovim]] has some great tree-sitter support with the [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-tree-sitter]] and a nice in-editor [[https://github.com/nvim-treesitter/playground][playground]]. Firstly, add the
tree-sitter plugin, but don't install yet, as shown on the nvim-treesitter page (using [[https://github.com/junegunn/vim-plug][vim-plug]]):

#+NAME: lst:vim-ts-plugin
#+BEGIN_SRC vimrc :noeval
call plug#begin()
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
call plug#end()
#+END_SRC

Now, add the following Lua block, using content from the homepage, and then set the ~ensure_installed~ to include the
query language and so highlight tree-sitter queries and set ~ignore_install~ to include sdml *before* installing the
tree-sitter plugin. The builtin sdml grammar will unfortunately install queries that will then be a problem so we want
to avoid that.

#+NAME: lst:vim-ts-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "query" }, 
    sync_install = false,
    auto_install = true,
    highlight = {
        enable = true,
        disable = {},
        additional_vim_regex_highlighting = false,
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = "gnn",
            node_incremental = "grn",
            scope_incremental = "grc",
            node_decremental = "grm",
        },
    },
    indent = {
        enable = true
    },
    query_linter = {
        enable = true,
        use_virtual_text = true,
        lint_events = {"BufWrite", "CursorHold"},
    },
}
#+END_SRC

To allow tree-sitter to do folding based on =folds.scm=, add the following to =init.vim=.

#+NAME: lst:vim-ts-folding
#+BEGIN_SRC vimrc :noeval
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
#+END_SRC

Once the core plugin has been installed you can add the following Lua block in =init.vim= to install /this/ grammar.

#+NAME: lst:vim-ts-add-sdml
#+BEGIN_SRC lua :noeval
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()

parser_config.sdml = {
    install_info = {
        url = "https://github.com/johnstonskj/tree-sitter-sdml",
        files = {"src/parser.c"},
        generate_requires_npm = true, 
        requires_generate_from_grammar = true,  
    },
    filetype = "sdm",
    maintainers = { "@johnstonskj" },
}
#+END_SRC

Additionally, try the  [[https://github.com/nvim-treesitter/nvim-treesitter-context][nvim-treesitter-context]] and [[https://github.com/nvim-treesitter/nvim-treesitter-refactor][nvim-treesitter-refactor]] plugins based on tree-sitter.

#+NAME: lst:vim-ts-extras
#+BEGIN_SRC vimrc :noeval
call plug#begin()

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context' 
Plug 'nvim-treesitter/playground'

call plug#end()
#+END_SRC

Add the corresponding configuration:

#+NAME: lst:vim-ts-playground-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    // …
    playground = {
        enable = true,
        disable = {},
        updatetime = 25,
        persist_queries = false,
        keybindings = {
            toggle_query_editor = 'o',
            toggle_hl_groups = 'i',
            toggle_injected_languages = 't',
            toggle_anonymous_nodes = 'a',
            toggle_language_display = 'I',
            focus_language = 'f',
            unfocus_language = 'F',
            update = 'R',
            goto_node = '<cr>',
            show_help = '?',
        },
    }
}
#+END_SRC

** VSCode

Try here:

- https://github.com/georgewfraser/vscode-tree-sitter
- https://github.com/EvgeniyPeshkov/syntax-highlighter

  
** <<sec:resolver-catalog>>Resolver Catalog File

The SDML catalog format is based on the OASIS [[https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html][XML Catalogs]] for XML namespace resolution for offline development. This
format has a number of features that make no sense for SDML and so a simpler set of properties is included. Listing
[[lst:catalog-grammar]] provides the grammar for the file, which contains items that describe a local module and provides
URL information to allow for constructing module URLs.

#+NAME: lst:catalog-grammar
#+CAPTION: SDML Catalog Grammar
#+BEGIN_SRC ebnf
Catalog      = BaseUrl, ( Name, CatalogEntry )*

BaseUrl      = Url

CatalogEntry = Group | Item

Group        = BaseUrl?, RelativePath? ( Name, Item )*
 
Item         = RelativeUrl, RelativePath

Name         = String

RelativeUrl  = String

RelativePath = String
#+END_SRC

*** Locating the Catalog

As module files most likely exist as part of a larger project, or may be organized into folders, it is useful to be able
to put the catalog file in the root of a project. Therefore, the resolver, if not provided an explicit location, will
look in the current working directory, and then it's parent directory and so on until either a catalog file is found or
we reach the file-system root.

#+BEGIN_EXAMPLE
..
  /parent
    /project
      /src
        vehicle-v1.sdm
      sdml-catalog.json
#+END_EXAMPLE

More TBD.

*** Resolving File Paths

The example in listing [[lst:catalog-example]] shows how to map the module identifier ~vehicle~ to a file and a base URL. The
root of the catalog has a mapping named /entries/ which has identifiers as keys and either /groups/ or /items/ as values. The
item only has two properties, a /relative URL/ and a /relative file-system path/.

#+NAME: lst:catalog-example
#+CAPTION: Example SDML Catalog File
#+BEGIN_SRC json :noeval
{
  "base": "https://example.org/rentals/",
  "entries": {
    "vehicle": {
      "item": {
        "relative_uri": "vehicle#",
        "relative_path": "src/vehicle-v1.sdm"
      }
    }
  }
}
#+END_SRC

The relative path in an item is added to the directory in which the catalog was located, not relative to where the
resolver is executed. For example, if the resolver is executed in the =project= directory the path to the catalog is
=./sdml-catalog.json=. Removing the file name gives the path =.= to which we add the relative path from the matching item to
result in =./src/vehicle-v1.sdm=.

*** Resolving Module Base URLs

Using the example from the previous section, if the resulting =./src/vehicle-v1.json= file contains a ~base~ attribute it
will take precedent. If no base attribute is present, a URL will be constructed by resolving the /relative URL/ from the
item against the /base URL/ specified in the catalog root. In the case of our example this becomes:

~<https://example.org/rentals/> + "vehicle#" = <https://example.org/rentals/vehicle#>~

*** Catalog Groups

When a project becomes more complex it is useful to provide organization in the form of folder structures.

More TBD

#+BEGIN_EXAMPLE
..
  /parent
    /project
      /src
        /inventory
          vehicle-v1.sdm
        /customer
          commercial-v2.sdm
          customer-v2.sdm
          retail-v3.sdm
      sdml-catalog.json
#+END_EXAMPLE

More TBD

#+NAME: lst:catalog-group-example
#+CAPTION: Example SDML Catalog File with Groups
#+BEGIN_SRC json :noeval
{
  "base": "https://example.org/rentals/",
  "entries": {
    "inventory": {
      "group": {
        "relative_path": "src/inventory/",
        "entries": {
          "vehicle": {
            "item": {
              "relative_uri": "vehicle#",
              "relative_path": "vehicle-v1.sdm"              
            }
          }
        }
      }
    },
    "customer": {
      "group": {
        "relative_path": "src/customer/",
        "entries": {
          "commercial": {
            "item": {
              "relative_uri": "commercial#",
              "relative_path": "commercial-v2.sdm"              
            }
          },
          "customer": {
            "item": {
              "relative_uri": "customer#",
              "relative_path": "customer-v2.sdm"              
            }
          }
          "retail": {
            "item": {
              "relative_uri": "retail#",
              "relative_path": "retail-v3.sdm"              
            }
          }
        }
      }
    }
  }
}
#+END_SRC

This means that the path for the module ~vehicle~ = =.= + =src/inventory/= + =vehicle-v1.sdm= and the path for the module
~customer~ = =.= + =src/customer/= + =customer-v2.sdm=.

  
# ----- Footnotes

[fn:ts]  Home at [[https://tree-sitter.github.io/tree-sitter/][Tree Sitter]], source at [[https://github.com/tree-sitter/tree-sitter][github.com]]
[fn:cargo] [[https://doc.rust-lang.org/cargo/getting-started/installation.html][Installing Cargo]] from the Cargo book
[fn:brew] The [[https://brew.sh/][Homebrew]] package manager
[fn:gviz] [[https://graphviz.org/download/][Graphviz]] open source graph visualization software
[fn:puml] [[https://plantuml.com/][PlantUML]] open-source UML diagram generator
