#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<app:resolver-catalog>>Appendix: Resolver Catalog File

The SDML catalog format is based on the OASIS [[https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html][XML Catalogs]] for XML namespace resolution for offline development. This
format has a number of features that make no sense for SDML and so a simpler set of properties is included. Listing
[[lst:catalog-grammar]] provides the grammar for the file, which contains items that describe a local module and provides
URL information to allow for constructing module URLs.

#+NAME: lst:catalog-grammar
#+CAPTION: SDML Catalog Grammar
#+BEGIN_SRC ebnf
Catalog      = BaseUrl, ( Name, CatalogEntry )*

BaseUrl      = Url

CatalogEntry = Group | Item

Group        = BaseUrl?, RelativePath? ( Name, Item )*
 
Item         = RelativeUrl, RelativePath

Name         = String

RelativeUrl  = String

RelativePath = String
#+END_SRC

** Locating the Catalog

As module files most likely exist as part of a larger project, or may be organized into folders, it is useful to be able
to put the catalog file in the root of a project. Therefore, the resolver, if not provided an explicit location, will
look in the current working directory, and then it's parent directory and so on until either a catalog file is found or
we reach the file-system root.

#+BEGIN_EXAMPLE
..
  /parent
    /project
      /src
        vehicle-v1.sdm
      sdml-catalog.json
#+END_EXAMPLE

More TBD.

** Resolving File Paths

The example in listing [[lst:catalog-example]] shows how to map the module identifier ~vehicle~ to a file and a base URL. The
root of the catalog has a mapping named /entries/ which has identifiers as keys and either /groups/ or /items/ as values. The
item only has two properties, a /relative URL/ and a /relative file-system path/.

#+NAME: lst:catalog-example
#+CAPTION: Example SDML Catalog File
#+BEGIN_SRC json :noeval
{
  "base": "https://example.org/rentals/",
  "entries": {
    "vehicle": {
      "item": {
        "relative_uri": "vehicle#",
        "relative_path": "src/vehicle-v1.sdm"
      }
    }
  }
}
#+END_SRC

The relative path in an item is added to the directory in which the catalog was located, not relative to where the
resolver is executed. For example, if the resolver is executed in the =project= directory the path to the catalog is
=./sdml-catalog.json=. Removing the file name gives the path =.= to which we add the relative path from the matching item to
result in =./src/vehicle-v1.sdm=.

** Resolving Module Base URLs

Using the example from the previous section, if the resulting =./src/vehicle-v1.json= file contains a ~base~ attribute it
will take precedent. If no base attribute is present, a URL will be constructed by resolving the /relative URL/ from the
item against the /base URL/ specified in the catalog root. In the case of our example this becomes:

~<https://example.org/rentals/> + "vehicle#" = <https://example.org/rentals/vehicle#>~

** Catalog Groups

When a project becomes more complex it is useful to provide organization in the form of folder structures.

More TBD

#+BEGIN_EXAMPLE
..
  /parent
    /project
      /src
        /inventory
          vehicle-v1.sdm
        /customer
          commercial-v2.sdm
          customer-v2.sdm
          retail-v3.sdm
      sdml-catalog.json
#+END_EXAMPLE

More TBD

#+NAME: lst:catalog-group-example
#+CAPTION: Example SDML Catalog File with Groups
#+BEGIN_SRC json :noeval
{
  "base": "https://example.org/rentals/",
  "entries": {
    "inventory": {
      "group": {
        "relative_path": "src/inventory/",
        "entries": {
          "vehicle": {
            "item": {
              "relative_uri": "vehicle#",
              "relative_path": "vehicle-v1.sdm"              
            }
          }
        }
      }
    },
    "customer": {
      "group": {
        "relative_path": "src/customer/",
        "entries": {
          "commercial": {
            "item": {
              "relative_uri": "commercial#",
              "relative_path": "commercial-v2.sdm"              
            }
          },
          "customer": {
            "item": {
              "relative_uri": "customer#",
              "relative_path": "customer-v2.sdm"              
            }
          }
          "retail": {
            "item": {
              "relative_uri": "retail#",
              "relative_path": "retail-v3.sdm"              
            }
          }
        }
      }
    }
  }
}
#+END_SRC

This means that the path for the module ~vehicle~ = =.= + =src/inventory/= + =vehicle-v1.sdm= and the path for the module
~customer~ = =.= + =src/customer/= + =customer-v2.sdm=.
