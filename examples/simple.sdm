module invoice base <https://example.com/rentals/> is
  ; Part of a larger example.

  import [dc skos xsd:decimal xsd:date xsd:string]

  import customers  ;; customer account information
  import finance    ;; stuff
  import vehicles   ;; vehicle information

  @skos:version = xsd:decimal(2)
  @skos:release = xsd:date("2023-08-12")

  structure DateRange is
    start_date -> xsd:date
    end_date -> xsd:date is
	  assert valid_range
        = "self.end_date >= self.start_date"
    end
  end

  structure OdometerRange is
    start_miles -> vehicles:OdometerReading
    end_miles -> vehicles:OdometerReading is
	  assert
        valid_range
        = "self.end_miles >= self.start_miles"
    end
  end

  entity Invoice is
    identity id -> integer
    customer -> customers:Customer
    vehicle -> vehicles:Vehicle
    rental_dates -> DateRange
    mileage -> OdometerRange
    group
      day_rate -> finance:CurrencyRate
      mile_rate -> ; FIXME: nance:CurrencyRate
      discount -> finance:DiscountPercentage
    end
  end

  datatype Name <- xsd:string is
    @xsd:minLength = true
    @xsd:maxLength = 25
  end

  datatype InvoiceId <- opaque integer

  event InvoiceCreated source Invoice is
    at -> xsd:dateTime
  end

  event InvoicePayed source Invoice is
    at -> xsd:dateTime
  end

  event InvoiceOverdue source Invoice is
    at -> xsd:dateTime
  end

  structure Payment is
    received -> xsd:dateTime
    amount -> finance:CurrencyAmount
    kind -> finance:PaymentKind
  end

  enum Terms of
    Immediate
    ThirtyDays
    SixtyDays
  end

  union PaymentKind of
    Cash
    Card
  end

end
