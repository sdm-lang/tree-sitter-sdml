#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<sec:rdf-semantic-model>>The RDF Semantics

The W3C's [[https://www.w3.org/RDF/][Resource Description Framework]] (RDF) is a mature standard for the open development of vocabularies and
knowledge representation. Key characteristics are that it has a fundamentally simple model, was designed with an /Open
World Assumption/ (OWA), and because of this it is inherently composable. RDF's core can be summarized with the following
grammar, noting that at it's core it comprises a set of statements about things.

#+BEGIN_SRC ebnf
Graph     = GraphId, Statement*
GraphId   = Uri
Statement = Subject, Predicate, Object
Subject   = Named | Anonymous
Predicate = Named
Object    = Subject | Literal
Named     = Uri
#+END_SRC

#+BEGIN_NOTE
The /Closed/ or /Open World Assumption/ of a given model or other representation determines how it copes with, or even
acknowledges new information beyond it's initial scope. For example, a database schema is a fixed structure determined
by defining some scope which necessitates the ignoring of information outside the schema. Similarly, when object
modeling in software development we start by defining a scope in the same manner. While both database schema and object
models can change over time they may become unstable if new facts contradict the existing structure. RDF on the other
hand was designed for the web and as such assumes that you cannot /know what is known/ about anything as there are other
datasets out there somewhere which may contain new information.
#+END_NOTE

In the following example, expressed in the RDF Turtle syntax, there is a single /statement/ whose /subject/ is the value
=:mytruck=, with a predicate =rdf:type=, and object =v:Truck=. Expressed in English this reads as /There exists a thing named
=:mytruck= whose type is =Truck= (from the =v= namespace)/. 

#+BEGIN_SRC ttl
:mytruck rdf:type v:Truck .
#+END_SRC

As the values above don't look like URIs the Turtle processor uses namespace mappings from prefix (before the ":") to
URI to expand the values above into the following statement.

#+BEGIN_SRC ttl
<https://example.org/p/simon#mytruck>
    <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>
    <https://example.org/v#Truck> .
#+END_SRC

#+BEGIN_NOTE
RDF, in a similar manner to SDML, defines an /abstract syntax/ that captures the structure and semantics of RDF. This
abstract syntax is then described in a set of concrete syntax specifications, or representations, including JSON,
JSON-LD (JSON for Linked Data), NT (N-Tripes), N3 (Notation3), RDFa (RDF annotations in HTML), TriG (graph-oriented
representation), Turtle (Terse RDF Triple Language), and XML. We use Turtle only in this document as it tends to be the
easier to read.
#+END_NOTE

A more complete example adds a number of statements about the common subject =:mytruck=.

#+BEGIN_SRC ttl
:mytruck rdf:type v:Truck .
:mytruck v:make "Dodge" .
:mytruck v:model "Ram 3500" .
:mytruck v:yearModel "2009"^^xsd:int .
#+END_SRC

I then consider adding the VIN[fn:vin] to my statements above, in the following manner.

#+BEGIN_SRC ttl
:mytruck v:hasVin "2G1FP22G522155049" .
#+END_SRC

However, I discover that my state Department of Transportation has an open dataset containing information recorded by
VIN (just FYI, my state does not provide this).

#+BEGIN_SRC ttl
dot:US_2G1FP22G522155049 rdf:type dot:VehicleRecord ;
    vso:engineDisplacement [
        rdf:type gr:QuantitativeValueFloat ;
        gr:hasValueFloat "6.7"^^xsd:float ;
        gr:hasUnitOfMeasurement "LTR"^^xsd:string
    ] ;
    dot:engineConfiguration "Inline 6-cylinder" ;
    dot:engineName dbpedia:Cummins_B_Series_engine ;
    dot:engineManufacturer dbpedia:Cummins ;
    dot:fuelType dbpedia:GasolineDiesel_fuel .
#+END_SRC

Each VIN is an addressable resource and so I can assert that my resource
named =:mytruck= is the same as the resource =dot:US_2G1FP22G522155049= which has the effect of adding any statements made
by the DOT to my record as well.

#+BEGIN_SRC ttl
:mytruck owl:sameAs dot:US_2G1FP22G522155049 .
#+END_SRC

If I now query my resource I should find that my handful of statements above now looks like this:

#+BEGIN_SRC ttl
:mytruck rdf:type v:Truck, dot:VehicleRecord ;
    owl:sameAs dot:US_2G1FP22G522155049 ;
    v:make "Dodge" ;
    v:model "Ram 3500" ;
    v:yearModel "2009"^^xsd:int ;
    vso:engineDisplacement [
        rdf:type gr:QuantitativeValueFloat ;
        gr:hasValueFloat "6.7"^^xsd:float ;
        gr:hasUnitOfMeasurement "LTR"^^xsd:string
    ] ;
    dot:engineConfiguration "Inline 6-cylinder" ;
    dot:engineName dbpedia:Cummins_B_Series_engine ;
    dot:engineManufacturer dbpedia:Cummins ;
    dot:fuelType dbpedia:GasolineDiesel_fuel .
#+END_SRC

Why is this valuable? Because it allows us easily to add new statements about things at any future point. We don't have
to worry about expanding a schema or changing table definitions we just add new statements and if their subjects are the
same they will be combined. To manage the naming of things you will have noticed that names in the examples above have
namespace prefixes and these namespaces correspond to definitions of /vocabularies/ or /ontologies/. Figure [[fig:owl-ontology]]
is an overview of the OWL Ontology for SDML. For clarity this figure elides the sub classes of /Group/ and /Member/. Those
classes in this diagram that are in a lighter color are /abstract/ in that they exist only to be super-types of the
classes actually referenced by other model elements. For more information on OWL itself, see [[https://www.w3.org/TR/owl2-overview/][OWL 2 Web Ontology Language
Document Overview (Second Edition)]] and [[https://cambridgesemantics.com/blog/semantic-university/learn-owl-rdfs/owl-references-humans/][OWL References for Humans]].

#+NAME: fig:owl-ontology
#+BEGIN_SRC dot :file owl-ontology.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  ModelElement [shape=ellipse;color=grey;fontcolor=grey];
  Module [shape=ellipse;penwidth=2.0;color=blue;fontcolor=blue];
  Cardinality [shape=ellipse];
  Classifier [shape=ellipse;color=grey;fontcolor=grey];
  Entity [shape=ellipse];
  Enumeration [shape=ellipse];
  Event [shape=ellipse];
  Group [shape=ellipse;color=grey;fontcolor=grey];
  Member [shape=ellipse;color=grey;fontcolor=grey];
  Structure [shape=ellipse];
  Union [shape=ellipse];
  Property [shape=ellipse];
  ValueVariant [shape=ellipse];
  Datatype [shape=ellipse];
  integer [shape=rectangle;style=filled;color=lightgrey;label="xsd:nonNegativeInteger"];

  Module -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Module -> Classifier [label="hasDefinition";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Classifier -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];

  Datatype -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Datatype -> Datatype [label="baseDatatype";style=dashed;arrowhead=empty];

  Enumeration -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Enumeration -> ValueVariant [label="hasVariant";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Structure -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Structure -> Group [label="hasGroup";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];
  Structure -> Member [label="hasMember";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Entity -> Structure [label="rdfs:subClassOf";arrowhead=empty];
  Entity -> Member [label="hasIdentifier";dir=both;arrowtail=diamond;arrowhead=open;headlabel="1"];

  Event -> Structure [label="rdfs:subClassOf";arrowhead=empty];
  Event -> Entity [label="eventSource";dir=both;arrowtail=odiamond;arrowhead=open];
  
  Union -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Union -> Classifier [label="variantType";dir=both;arrowtail=odiamond;arrowhead=open;headlabel="+"];

  Property -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Property -> Member [label="role";arrowhead=empty];

  Group -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Group -> Member [label="hasMember";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Member -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Member -> Cardinality [label="sourceCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];
  Member -> Classifier [label="targetClassifier";dir=both;arrowtail=odiamond;arrowhead=open];
  Member -> Cardinality [label="targetCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];

  Cardinality -> integer [label="owl:maxCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];
  Cardinality -> integer [label="owl:minCardinality";dir=both;arrowtail=diamond;arrowhead=open];

  ValueVariant -> integer [label="hasValue";dir=both;arrowtail=diamond;arrowhead=open];
}
#+END_SRC

#+CAPTION: OWL Ontology
#+RESULTS: fig:owl-ontology
[[file:owl-ontology.svg]]

Figure [[fig:owl-ontology]] uses some notation elements from UML, although not a UML diagram itself. 
For a higher resolution version, [[file:owl-ontology.svg][click here]].

1. Open triangular arrow heads correspond to the RDF Schema =subClassOf= relationship.
2. Filled diamonds correspond to composite associations, or strong ownership.
3. Open diamonds correspond to aggregate associations, or weak ownership.

** What is an Ontology?

The term /ontology/ was adopted from philosophy in around 1980 to describe logical theories developed to support work in
artificial intelligence â€“ for instance logical theories capturing the knowledge of the world of a robot. Since then the
term has come to be widely used in information-driven science, journalism, industry, defense, intelligence, and
government to describe computer artifacts created to support data retrieval, integration, reasoning and an expanding
range of further goals.

An ontology is at its core a collection of general /terms/ organized into a taxonomic /hierarchy/ and associated with /formal
definitions/ and /axioms/. A simple example of how an ontology is used occurs where we have a number of heterogeneous data
sources, each using different codes or labels to describe the same entities in reality â€“ for instance proteins or
weapons â€“ and where we need to unify all the information in these different sources that pertains to each type of
represented entity. Ontologies address this problem by providing a data source-neutral term for each type of entity
which is then used to tag corresponding data entries in a consistent way. This enables enhanced retrieval and
aggregation of the data. It also allows reasoning across aggregated data through appeal to the logical structure of the
definitions and axioms of the corresponding ontology terms.

Such strategies have proved most successful where multiple ontologies covering different domains of entities are built
in coordinated fashion to ensure interoperability and avoid overlap and redundancy. One method to achieve such
coordination involves the application of a hub-and-spokes strategy, resting on a highly general domain-neutral hub,
together with successive layers of spokes comprising domain ontologies built out of terms defined as specializations of
terms contained in the hub. A top level ontology is an ontology designed to serve as hub in such an architecture.

** SDML Ontology

Listing [[lst:owl-ontology]] is the ontology header that describes the Ontology itself. This shows the use of annotation
properties from the Dublin Core [[https://www.dublincore.org/specifications/dublin-core/dcmi-terms/][DCMI Terms]] and the W3C Simple Knowledge Organization System ([[https://www.w3.org/TR/skos-reference/][SKOS]]). Section
[[sec:common-annotations]] presents details on commonly used annotation properties found in the Ontology.

#+NAME: lst:owl-ontology
#+CAPTION: OWL: Ontology Header
#+BEGIN_SRC ttl
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@base <https://sdml.io/sdml-owl.ttl#> .

<https://sdml.io/sdml-owl.ttl#>
    rdf:type owl:Ontology ;
    skos:prefLabel "Simple Domain Modeling Language"@en ;
    skos:altLabel "SDML"@en ;
    dc:hasVersion "0.1.10" ;
    dc:creator "Simon Johnston <johntonskj@gmail.com>" ;
    dc:license <https://github.com/johnstonskj/tree-sitter-sdml/blob/main/LICENSE> ;
    rdf:seeAlso <https://sdml.io/> .
#+END_SRC

** Datatypes

The built-in datatypes supported by SDML are covered in section [[sec:surface-syntax]], specifically in table [[tbl:builtin-simple-types]].

** Classes

All classes have an RDF type of =owl:Class=.

#+NAME: tbl:owl-classes
#+CAPTION: OWL: Classes
| Name               | Sub-Class Of               | Disjoint With                                 |
|--------------------+----------------------------+-----------------------------------------------|
| =:ByReferenceMember= | =:Member=                    | =:IdentityMember=, =:ByValueMember=               |
| =:ByValueMember=     | =:Member=                    | =:IdentityMember=, =:ByReferenceMember=           |
| =:Cardinality=       | None.                      |                                               |
| =:Classifier=        | =:ModelElement=              |                                               |
| =:Datatype=          | =:Classifier=, =rdfs:Datatype= | =:Enumeration= , =:Structure= , =:Union= , =:Unknown= |
| =:Entity=            | =:Structure=                 | =:Event=                                        |
| =:EntityGroup=       | =:Group=                     | =:StructureGroup=                               |
| =:Enumeration=       | =:Classifier=                | =:Datatype=, =:Structure=, =:Union=, =:Unknown=       |
| =:Event=             | =:Structure=                 | =:Entity=                                       |
| =:Group=             | =:ModelElement=              |                                               |
| =:IdentityMember=    | =:Member=                    | =:ByValueMember=, =:ByReferenceMember=            |
| =:Member=            | =:ModelElement=              |                                               |
| =:ModelElement=      | None.                      |                                               |
| =:Module=            | =:ModelElement=              |                                               |
| =:Property=          | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Structure=, =:Unknown= |
| =:RefRole=           | =:Role=                      |                                               |
| =:Role=              | None.                      |                                               |
| =:Structure=         | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Union=, =:Unknown=     |
| =:StructureGroup=    | =:Group=                     | =:EntityGroup=                                  |
| =:Union=             | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Structure=, =:Unknown= |
| =:Unknown=           | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Structure=, =:Union=   |
| =:Variant=           | None.                      |                                               |

** Object Properties

All object properties have an RDF type of =owl:ObjectProperty=.

#+NAME: tbl:owl-object-properties
#+CAPTION: OWL: Object Properties
| Domain                                                         | Name                     | Range                                       | Inverse Of       |
|----------------------------------------------------------------+--------------------------+---------------------------------------------+------------------|
| =:ByReferenceMember= âˆª =:RefRole=                                  | =:sourceCardinality=       | =:Cardinality=                                |                  |
| =:ByReferenceMember= âˆª =:Role=                                     | =:targetCardinality=       | =:Cardinality=                                |                  |
| =:Classifier=                                                    | =:isDefinedBy=             | =:Module=                                     | =:hasDefinition=   |
| =:Classifier=                                                    | =:isTypeVariantOf=         | =:Union=                                      | =:hasTypeVariant=  |
| =:Datatype=                                                      | =:baseDatatype=            | =:Datatype= âˆª =rdfs:Datatype=                   |                  |
| =:Entity=                                                        | =:entityHasGroup=          | =:EntityGroup=                                |                  |
| =:Entity=                                                        | =:emitsEvent=              | =:Event=                                      | =:eventSource=     |
| =:Entity=                                                        | =:hasIdentityMember= ï»¿^1,2  | =:IdentityMember=                             |                  |
| =:Entity= âˆª =:EntityGroup=                                         | =:hasByReferenceMember= ï»¿^2 | =:ByReferenceMember=                          |                  |
| =:Entity= âˆª =:EntityGroup= âˆª =:Event= âˆª =:Structure= âˆª =:StructureGroup= | =:hasByValueMember= ï»¿^2     | =:ByValueMember=                              |                  |
| =:Enumeration=                                                   | =:hasVariant=              | =:Variant=                                    | =:isVariantOf=     |
| =:Event=                                                         | =:eventSource=             | =:Entity=                                     | =:emitsEvent=      |
| =:Member=                                                        | =:targetClassifier=        | =:Classifier=                                 |                  |
| =:Member=                                                        | =:isMemberOf=              | =:Structure= âˆª =:EntityGroup= âˆª =:StructureGroup= | =:hasMember=       |
| =:Member=                                                        | =:targetClassifier=        | =:Classifier= âˆª =:Unknown=                      |                  |
| =:Module=                                                        | =:hasDefinition=           | =:Classifier=                                 | =:isDefinedBy=     |
| =:Structure=                                                     | =:structureHasGroup=       | =:StructureGroup=                             |                  |
| =:Structure= âˆª =:EntityGroup= âˆª =:StructureGroup=                    | =:hasMember=               | =:Member=                                     | =:isMemberOf=      |
| =:Union=                                                         | =:hasTypeVariant=          | =:Classifier=                                 | =:isTypeVariantOf= |
| =:Variant=                                                       | =:isVariantOf=             | =:Enumeration=                                | =:hasVariant=      |

Notes:
1. This also has the rdf type =owl:FunctionalProperty=.
2. These are also sub-properties of =:hasMember=.

** Datatype Properties

All datatype properties have an RDF type of =owl:DatatypeProperty=.

#+NAME: tbl:owl-datatype-properties
#+CAPTION: OWL: Datatype Properties
| Name       | Sub Property Of | Domain       | Range                  |
|------------+-----------------+--------------+------------------------|
| =:hasValue=  | =rdf:value=       | =:Variant=     | =xsd:nonNegativeInteger= |
| =:maxOccurs= |                 | =:Cardinality= | =xsd:nonNegativeInteger= |
| =:minOccurs= |                 | =:Cardinality= | =xsd:nonNegativeInteger= |

** Annotation Properties

All annotation properties have an RDF type of =owl:AnnotationProperty=.

#+NAME: tbl:owl-annotation-properties
#+CAPTION: OWL: Annotation Properties
| Name                | Domain       | Range                  |
|---------------------+--------------+------------------------|
| =:defaultVariant=     | =:Enumeration= | =xsd:NMTOKEN=            |
| =:deprecatedSince=    | N/A          | =:versionString=         |
| =:flatten=            | =:Member=      | =Boolean=                |
| =:hasVersionIdType=   | =:Entity=      | =:Datatype= âˆª =:Structure= |
| =:hasVersioningStyle= | =:Entity=      | =VersioningStyle=        |
| =:introducedIn=       | N/A          | =:versionString=         |
| =:rootEntity=         | =:Module=      | =:Entity=                |

The properties =:deprecatedSince= and =:introducedIn= both refer to a range type =:versionString=, this type is a string that
conforms to the [[https://semver.org/][semver]] form of /major.minor.path/ where each is an integer. 

#+BEGIN_SRC ttl
:versionString rdf:type rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions (
        [ xsd:pattern "(0|[1-9][0-9]*)(\.0|[1-9][0-9]*){,2}" ]
    ) .
#+END_SRC

The property =:hasVersioningStyle=, if present, denotes an entity as versioned and what form of versioning is to be applies.
The values for this property are:

- Immutable :: The user does not get to control the versioning, every mutation of the entity results in a new version
  and that version is therefore immutable and so version identifiers are maximally stable.
- Snapshot :: The user creates a new version explicitly with a specific operation. This implies that there are mutations
  of a specific version possible and so the version identifier is not necessarily stable.
- Mutable :: In this case the user has complete control over the versioning by mutation of the entity. In general this
  implies that there is some member of the entity that holds the version identifier. This results in an explicitly
  unstable identifier.

#+BEGIN_SRC ttl
:VersioningStyle rdf:type rdfs:DataRange ;
    owl:oneOf (
        "Immutable"^^xsd:string
        "Snapshot"^^xsd:string
        "Mutable"^^xsd:string
    ) .
#+END_SRC

The corresponding property =:hasVersionIdType= references the type used to represent a specific version. The default for this
is =xsd:string=.

** <<sec:common-annotations>>Commonly Used Annotations

The following are annotation properties that are common in defining and using Ontologies and other forms of controlled
vocabularies. These are all well-defined as well as commonly understood and so should be used before others in
annotating a model.

#+NAME: tbl:common-annotations
#+CAPTION: Commonly Used Annotation Properties
| Name             | Usage                                                                                          | Domain       | Range          |
|------------------+------------------------------------------------------------------------------------------------+--------------+----------------|
| =:defaultVariant=  | Denotes, if present, the default variant of an enumeration.                                    | =:ValueVariant= | =xsd:NMTOKEN=    |
| =:deprecatedSince= | The specific version in which this model element was marked as deprecated.                     | N/A          | =:versionString= |
| =:introducedIn=    | The specific version this model element first appeared.                                        | N/A          | =:versionString= |
| =dc:conformsTo=    | An established standard to which the described  model element conforms.                        | N/A          | =xsd:AnyURI=     |
| =dc:contributor=   | An entity responsible for making contributions to the model element.                           | N/A          | =xsd:string=     |
| =dc:creator=       | An entity primarily responsible for making the model element.                                  | N/A          | =xsd:string=     |
| =dc:license=       | A legal document giving official permission to do something with the model element.            | =:Module=      | =xsd:AnyURI=     |
| =rdfs:seeAlso=     | Used to indicate a resource that might provide additional information about the model element. | N/A          | =xsd:AnyURI=     |
| =skos:altLabel=    | An alternative lexical label/name for the model element.                                       | N/A          | =rdf:langString= |
| =skos:definition=  | A complete explanation of the intended meaning of the model element.                           | N/A          | =rdf:langString= |
| =skos:hiddenLabel= | A lexical label/name for the element where it may be searchable but not commonly displayed.    | N/A          | =rdf:langString= |
| =skos:historyNote= | Describes significant changes to the meaning or the form of the model element.                 | N/A          | =rdf:langString= |
| =skos:prefLabel=   | The preferred lexical label/name of the model element.                                         | N/A          | =rdf:langString= |

# ----- Footnotes:

[fn:vin] [[https://en.wikipedia.org/wiki/Vehicle_identification_number][Vehicle identification number]], Wikipedia
