#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Introduction

The Simple Domain Modeling Language[fn:sdml] is a small data-oriented language for constructing, documenting, and
reasoning about a conceptual domain model. For a background on domain modeling see section [[sec:domain-modeling]]. At it's
core SDML comprises *1.* a /Semantic Model/ whose structure and semantics are described in RDF[fn:rdf] by an OWL[fn:owl]
ontology (see section [[sec:rdf-semantic-model]] for more details), *2.* a /surface syntax/ for editing and sharing model
artifacts (see section [[sec:surface-syntax]] for more details), *3.* a /constraint language/ to capture model invariants not
covered by the data descriptions in the surface syntax. Figure [[fig:sdml-overview]] shows the relationship between
these high-level components. This book covers both the surface syntax and semantic model as well as the correspondence
between them. However, the primary focus of the documentation is the surface syntax as most users will be interacting
with it alone.

#+NAME: fig:sdml-overview
#+BEGIN_SRC dot :file sdml-overview.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  instance [shape="note"; label="My Domain\nModel"];
  sdml [shape="ellipse"; label="Surface\nSyntax"];  
  semantics [shape="ellipse"; label="Semantic\nModel"];
  rdf [shape="ellipse"; label="RDF/OWL"];

  instance -> sdml [arrowhead="open"; label="expressed-in"];
  sdml -> semantics [arrowhead="open"; label="conforms-to"];
  semantics -> rdf [arrowhead="open"; label="expressed-in"];
}
#+END_SRC

#+CAPTION: Model Overview
#+RESULTS: fig:sdml-overview
[[file:sdml-overview.svg]]

The problem with any language, or technology in general, that aims to be /simple/ it has to leave a lot of things out that
at least some people would like to see. SDML is simple in that it started with the simplest possible set of constructs
and set a very high bar for the addition of any additional features. This means that SDML is /opinionated/ and that
opinion may reflect more on the author than on any methodology. For example, SDML does not model the behavior of the
business and some readers will expect some behavior description. However, it is far harder to define a model of behavior
than for data, and such a model gets out of the realm of /simple/ very quickly. SDML also does not support polymorphism in
ways that programmers will expect, but as programmers are only one of the groups involved in domain modeling we err on
the side of /broadest understandability/.

The SDML language uses some ideas from UML[fn:uml], a language which is often used in the construction of such models today.
Unfortunately, UML does not pass the simple test and while there are good ideas and well-understood concepts it was not
possible to use them without taking away some options where they don't make sense or where their use may distract from
the major purpose of the model. While UML is predominantly a visual language, the OMG /Human-Usable Textual Notation/
(HUTN)[fn:hutn] specification notwithstanding, SDML is a textual language with a mapping to UML for visualization. The
development of SDML as a textual language additionally allows existing tools in the software development space such as
version control and continuous integration tools to be applied to the models, in effect treating them as source code.

The SDML language also takes some of the concepts from Domain-Driven Design (DDD)[fn:ddd], namely the separation of entities
(/an object defined not by its attributes, but its identity/) from value objects (/an immutable object that contains
attributes but has no conceptual identity/), simply termed structures in SDML. This model does not include the following
DDD first-class concepts: /aggregates/, /repositories/, /factories/, or /services/.

** <<sec:domain-modeling>>What is Domain Modeling?

Domain modeling is the process by which we develop a model of our business domain. In particular, we model /what/ our
business does and not /how/ it is done. The resulting model should be recognizable by different stakeholders both
technical and non-technical, internal to the business as well as external partners. In some domains with a level of
standardization, or regulation, a level of commonality between different businesses and so domain models may be used to
describe inter-business interactions. This approach has been used by a number of standards such as RosettaNet[fn:rosettanet].

There is often confusion around the use of the term /Domain Model/ especially in it's relation to terms such as /Data Model/, /Class
Model/, /Schema/ and more. The rest of this section is an attempt to clarify the terminology and how the relevant modeling
efforts are undertaken. This is not intended as an exhaustive review of modelling approaches, standards, or technologies
and neither does it make any judgement as to the usefulness of any approach or technology.

*** Model Terminology

A model is an informative representation of an object, person or system. The term originally denoted the plans of a
building in late 16th-century English, and derived via French and Italian ultimately from Latin modulus, a measure. As
is common in software development the term model is overloaded and it's use can lead to confusion as people have
different expectations and assumptions regarding what kind of model is being discussed. To this end we introduce some
terminology here that, if simply used as model qualifiers, helps to disambiguate the purpose of any particular model.

For now we will use the following classification to partition the major purpose of different model instances.

- *Data*: A data model in software engineering is a representation of concepts and the relationships, constraints, rules,
  and operations to specify data semantics for a chosen domain of discourse. Typically it specifies relations between
  kinds of things, but may also include relations with individual things. It can provide sharable, stable, and organized
  structure of information requirements or knowledge for the domain context.
- *Behavior*: Behavioral languages are designed to describe the observable behavior of complex systems consisting of
  components that execute concurrently. These languages focus on the description of key concepts such as: concurrency,
  nondeterminism, synchronization, and communication.
- *Process*: [Business] process modeling (BPM) in business process management and systems engineering is the activity of
  representing processes of an enterprise, so that the current business processes may be analyzed, improved, and
  automated.

A common framework for defining the /level/ of abstraction inherent to a model are the three /perspectives/
introduced by ANSI in 1975 (introduced in section [[sec:sdml-role]].

- *Conceptual*: In the field of computer science a conceptual model aims to express the meaning of terms and concepts used
  by domain experts to discuss the problem, and to find the correct relationships between different concepts. The
  conceptual model attempts to clarify the meaning of various, usually ambiguous terms, and ensure that confusion caused
  by different interpretations of the terms and concepts cannot occur.
- *Logical*: A logical data model or logical schema is a data model of a specific problem domain expressed independently
  of a particular database management product or storage technology (physical data model) but in terms of data
  structures such as relational tables and columns, object-oriented classes, or XML tags. This is as opposed to a
  conceptual data model, which describes the semantics of an organization without reference to technology.
- *Physical*: A physical data model (or database design) is a representation of a data design as implemented, or intended
  to be implemented, in a database management system. In the lifecycle of a project it typically derives from a logical
  data model, though it may be reverse-engineered from a given database implementation.
  
With these two classifications we can construct a simple grammar for the qualification of the term /model/:

#+BEGIN_SRC ebnf
Perspective    = "conceptual" | "logical" | "physical"

Scope          = "data" | "behavior" | "process"

ModelReference = Perspective, Scope "model"
#+END_SRC

*** Modeling Language/Notation

There have been a number of modeling techniques, notations, and languages over the years. The following table describes
those in common use today. It is worth noting that after OMG standardization there are common meta-model underpinnings
for UML and BPMN.

|            | *Data*                            | *Behavior*                     | *Process*          |
| *Conceptual* | UML^1, Concept Map, Semantic Net | UML^2, Flowchart              | UML^3, BPMN, EPC^4 |
| *Logical*    | UML^1, EXPRESS, IDEF1X, IE^5      | UML^2                         | BPMN             |
| *Physical*   | UML^1, â€¦                         | UML^6, Statecharts, Petri net |                  |

1. Class and Component diagrams.
2. Sequence, State, and Activity diagrams.
3. Use Case and Activity diagrams.
4. Event-driven Process Chains.
5. Information Engineering (IE) introduced the commonly used /crows-foot/ notation.
6. Action Semantics and action languages.

UML has a built-in extension mechanism with /stereotypes/ and /profiles/ and data modeling concerns are often introduced
with specific extensions such as stereotypes for different key types. 

*** Modeling Themes

(*TODO*: Complete this section)

Commonality

Variability

- *Inheritence* :: ...
- Interface and Implementation :: ...
-

Scope: Breadth and Depth

*** Domain-Driven Design

Domain-driven design (DDD) is a software design approach focusing on modeling software to match a domain according to
input from that domain's experts. Under domain-driven design, the structure and language of software code (class names,
class methods, class variables) should match the business domain.

Within this approach the /domain/ model is usually a conceptual or logical data model that describes the key entities
that comprise the domain. The representation of this model can be any of the languages described above although UML is
the common. The discipline of domain modeling is unique in it's focus on deriving data/information models directly from
the business and stresses the involvement of domain experts from the business in the development of models. Additionally
the literature describes specific kinds of model entities and their unique semantics, /Entities/, /Value Objects/, /Events/,
and /Aggregates/, etc. which help focus conversations on key modeling concepts such as identity, lifecycle, and ownership.

Thus, a *Domain Model* is a /conceptual/ (UML or Ontology) or /logical/ (UML) /data model/ developed according to a specific
methodology (DDD) and employing a specific meta-language (UML Profile).

Some of the defined kinds, /Repository/, /Factory/, and /Service/ are lower-level concerns and the lack of a clear separation
between different levels of abstraction is one criticism of the method. Additionally terms such as Entity as defined by
DDD are not entirely compatible with the use in pre-existing methods such as E/R modeling.

However, the method's focus on the business and it's vocabulary as the basis for models is valuable in an effort such as
the Universal API where the model will represent our business model in different presentations.

** Domain-Related Models

Domain modeling is often an isolated activity in that the created model is applied in a singular fashion. However,
there are other modeling activities that share similar aims, whose subjects intersect, and which are also conceptual or
logical data models. 

- *Data Catalogs* :: These describe structured and sometimes unstructured data in data stores, messages, and so forth, and
  describe tables and similar structures comprised of data elements. The metadata managed in a catalog may go beyond
  data structure and include privacy, security, governance, lineage, and provenance classification.
- Data Dictionaries :: Data dictionaries overlap with the data catalog, but typically work from the bottom up rather
  than top down. Instead of describing structures and the elements they contain, a data dictionary focuses on the atomic
  elements and how they relate and aggregate into structures. 
- *Business Glossaries* :: A business glossary also focuses on individual terms but captures both technical and
  non-technical properties of these terms. A business glossary contains definitions of terms as well as managing
  relations such as /broader/, /narrower/, /equivalent/, or /labels/  between terms.

Table [[tbl:domain-related-models]] contains a summary of characteristics of these two artifacts compared to a domain model.
Note that the column "Open/Closed"captures the /World Assumption/ of typical artifacts/processes/products in each row
-- see section [[sec:rdf-semantic-model]] for more information. 

#+NAME: tbl:domain-related-models
#+CAPTION: Domain-Related Model Summary
|                   | Primary          | Secondary                         | Open/Closed |
|-------------------+------------------+-----------------------------------+-------------|
| Data Catalog      | Structures       | Data Element, Table, Dataset, Job | Semi-Closed |
| Data Dictionary   | Data Element     | Aggregates                        | Semi-Closed |
| Business Glossary | Vocabulary, Term | Relations, Labels                 | Closed      |
| Domain Model      | Entities         | Structures                        | Closed      |
| SDML Domain Model | Entities         | Properties, Structures            | Open        |

Given that there is clearly overlap in these tools, of viewpoints, it would be valuable if it were possible to link the
different models and provide a common view. SDML attempts this by providing an underlying RDF representation that can be
combined with other RDF-based vocabularies such as SKOS[fn:skos] for thesauri, or XXX for provenance. Storing SDML as
RDF in a graph database along with SKOS definitions and other vocabularies will enhance each viewpoint with additional
information. Figure [[fig:sdml-foundation]] shows how these different viewpoints may come together.

#+NAME: fig:sdml-foundation
#+BEGIN_SRC dot :file sdml-foundation.svg :exports results
digraph G {
  bgcolor="transparent";
  compound=true;
  rankdir="LR";
  fontname="Helvetica,Arial,sans-serif";
  node [shape="rect"; fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];
  splines="ortho";

  subgraph cluster_0 {
    height=1.0;
    sdml [label="SDML"];
    catalog [label="Data\nCatalog"];  
    dictionary [label="Data\nDictionary"];  
    glossary [label="Business\nGlossary"];
  
    glossary -> sdml [style="dashed"];
    dictionary -> glossary [style="dashed"];
    catalog -> dictionary [style="dashed"];
  }
  
  foundation [label="Common Foundation\n(RDF/OWL)"];
  sdml -> foundation [ltail=cluster_0];

  subgraph cluster_1 {
    sparql [label="SPARQL"];
    tools [label="Tools"];

    sparql -> tools [style="dashed"; dir="back"];
  }

  foundation -> sparql [lhead=cluster_1; dir="back"];
}
#+END_SRC

#+CAPTION: Model Foundations
#+RESULTS: fig:sdml-foundation
[[file:sdml-foundation.svg]]

** <<sec:sdml-role>>Domain Modeling's Role in Development

The software development process may be described as the management of abstraction; requirements are an abstraction
representing actual needs of some group of individuals, a whiteboard drawing may be an (informal) abstraction of a
system design, a UML model may be a more-or-less formal abstraction of system or component dependencies, and so forth.
We can stratify these levels of abstraction as shown in figure [[fig:artifact-layering]] although almost any such
stratification will crash headlong into any number of detractors.

#+NAME: fig:artifact-layering
#+BEGIN_SRC dot :file artifact-layering.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  fontname="Helvetica,Arial,sans-serif";
  node [shape="rect"; width=1.5; fontname="Helvetica,Arial,sans-serif"; fontsize=10];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];
  
  subgraph cluster_0 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Abstract Models";
    margin=12.0;

    concept  [label="Conceptual Models\n(e.g. concept maps)"];
    logical  [label="Logical Models\n(e.g. UML)"];
    
    concept -> logical [arrowhead="open"; xlabel="  transform  "; labeldistance="2.5"];
    logical -> concept [arrowhead="open"; xlabel="  abstract  "; labeldistance="2.5"];
  }
 
  subgraph cluster_1 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Concrete Models";
    margin=12.0;
    
    physical [label="Physical Models\n(e.g. profiled UML)"];  
    develop  [label="Development Artifacts\n(e.g. source, config)"];
    logical -> physical [arrowhead="open"];
    physical -> logical [arrowhead="open"];
    
    physical -> develop [arrowhead="open"; xlabel="  transform  "];
    develop -> physical [arrowhead="open"; xlabel="  abstract  "];
  }
  
  subgraph cluster_2 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Artifacts";
    margin=12.0;
    
    deploy   [shape="component"; label="Deployment Artifacts\n(e.g. executables)"];
    
    develop -> deploy [arrowhead="open"];
    deploy -> develop [arrowhead="open"];
   }
   
}
#+END_SRC

#+CAPTION: Artifact Layers in Software Development
#+RESULTS: fig:artifact-layering
[[file:artifact-layering.svg]]

While this figure groups these levels into three groups, /abstract models/, /concrete models/, and /artifacts/ this is again
somewhat arbitrary given that even the executable deployment artifacts are an abstraction concerning how the operating
system and CPU will layout and execute our application.

Figure [[fig:model-transforms]] demonstrates the key element of a /Model-Driven Development/[fn:mdd] style, namely the
transformation between models and between models and other development artifacts. In this case we use the terms
introduced above where we transform from a /more/ abstract model to a /more/ concrete model or directly to other artifacts.
The transformation also should allow configuration to direct the transform, perhaps injecting properties not a part of
the domain model but which are required in the transformation target. For example, converting an SDML structure into a
SQL DDL statement may need to know the specific SQL dialect to target.

#+NAME: fig:model-transforms
#+BEGIN_SRC dot :file model-transforms.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  semantics [shape="ellipse"; label="Abstract\nModel"];
  transform [shape="cds"; margin="0.2,0.2"; label="Transformation"];
  config [shape="ellipse"; label="Configuration"];
  other [shape="ellipse"; style="dashed"; label="Concrete\nModel(s)"];

  semantics -> transform [label="source"];
  config -> transform [label="parameterize"];
  transform -> other [label="generate"];
  other -> semantics [label="abstraction"];
}
#+END_SRC

#+CAPTION: Model Transformations
#+RESULTS: fig:model-transforms
[[file:model-transforms.svg]]

*Example:*

In the following example (figure [[fig:example-transform]]) we show a tree of transformations from a domain model through
three intermediate models to various artifacts such as SQL, code, and Thrift[fn:thrift]. Some readers may feel a sense
of dÃ©jÃ  vu, you or your employer may have tried different model-driven development tools in the past and noted a number
of significant issues. One of the major reasons for giving up on this approach is the /round-trip/ problem -- what if I
edit the generated thing, how does that get reverse engineered back into the higher-level model?

#+NAME: fig:example-transform
#+BEGIN_SRC dot :file example-transform.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  domain [shape="ellipse"; label="Domain\nModel"];

  docs [shape="note"; label="Documentation"];
  domain -> docs [label="transform"];

  service [shape="ellipse"; label="Service\nDefinition"; style=dotted;];
  domain -> service [label="transform"];

  smithy [shape="component"; label="Smithy\n(IDL)"];
  service -> smithy [label="transform"];
  
  oas [shape="component"; label="OpenAPI Spec"];
  smithy -> oas [label="transform"];

  stubs [shape="component"; label="Service Stubs\n(code)"];
  smithy -> stubs [label="transform"];

  client [shape="component"; label="Client Library\n(code)"];
  smithy -> client [label="transform"];

  data [shape="ellipse"; label="Data\nDefinition"; style=dotted;];
  domain -> data [label="transform"];

  dbsql [shape="component"; label="SQL DDL"]; 
  data -> dbsql [label="transform"];

  dbjson [shape="component"; label="JSON Schema"];
  data -> dbjson [label="transform"];
  
  message [shape="ellipse"; label="Message\nDefinition"; style=dotted;];
  domain -> message [label="transform"];

  thrift [shape="component"; label="Apache Thrift\n(IDL)"];
  message -> thrift [label="transform"];
}
#+END_SRC

#+CAPTION: Example Model Transformations
#+RESULTS: fig:example-transform
[[file:example-transform.svg]]

One key aspect of figure [[fig:example-transform]] is that all of the arrows flow in a single direction. Modeling tool
vendors got hung up on the fact that they generated artifacts in programming languages that /could/ be edited and so
almost certainly would be; therefore, they had to attempt to round-trip those changes. If the transformations had been
given additional configuration that took care of the kinds of edits that people may /need/ to perform then no editing
would be needed and no round-tripping. Inside a modern compiler your source code is transformed multiple times,
sometimes a pre-processor, then an intermediate machine-independent language used by the optimizer and then to the
machine specific assembler. In some compilers there are even multiple intermediate languages at different levels. While
it is often possible to inspect these intermediate forms it is not realistic to edit them (unless you are a compiler
developer) and there is *no* expectation that the compiler will put your changes back into your source code.
C
** SDML as a Domain Modeling Language

TBD

*** Goals

The purpose of SDML is to be the source of truth concerning the enterprise's domain, and the root of the tree shown in
figure [[fig:example-transform]]. It needs to provide an abstraction that is expressive enough to model the structure of
entities that define the domain, while providing enough detail to be useful in transforming to the next level of more
concrete models and artifacts.

SDML has two key tenets that help in this goal:

1. Provide the ability to capture correct, but /incomplete/ models to allow fast capture of key information first.
2. Provide an extension mechanism that goes beyond marker values and allows semantic extension when necessary.

Additionally, by focusing first on a text-based syntax we provide a resource representation that fits well into most
software processes, it can be version controlled, it's diff-friendly, you can use code-reviews and pull-requests to
build governance processes. While this document /does not/ preclude alternative representations, including visual ones,
the surface syntax is the canonical authoring form.

(*TODO*: Add data dictionary discussion)

(*TODO*: Add vocabulary discussion)

*** Non-Goals

(*TODO*: Complete this list)

1. Versioning
2. Object Modeling
3. Behavior Modeling
4. Standardization

** Acknowledgments

Obviously this work relies on the decades of prior art in domain modeling and modeling languages in general; in
particular, the many authors and contributors to the UML family of specifications. Similarly SDML relies heavily on the
work done by the W3C on RDF and OWL and I owe thanks to the many authors and contributors of those specifications and
the myriad examples of RDF usage and application that I have drawn from.

The syntax diagrams generated for this document were generated from the BNF source by the /Railroad Diagram Generator/ tool,
written by Gunther Rademacher, and hosted at [[https://www.bottlecaps.de/rr/ui.]]


# ----- Footnotes

[fn:sdml] Home at [[https://sdml.io/][sdmi.io]], source at [[https://github.com/johnstonskj/tree-sitter-sdml][github.com]]

[fn:owl] [[https://www.w3.org/OWL/][Web Ontology Language (OWL)]], W3C

[fn:uml] [[http://www.uml.org/][The Unified Modeling Language (UML)]], OMG

[fn:hutn] Human-Usable Textual Notation (HUTN), OMG

[fn:rdf] [[https://www.w3.org/RDF/][Resource Description Framework (RDF)]], W3C

[fn:ddd] [[https://en.wikipedia.org/wiki/Domain-driven_design][Domain-Driven Design]], Wikipedia

[fn:mdd] [[https://en.wikipedia.org/wiki/Model-driven_engineering][Model-Driven Development]], Wikipedia

[fn:rosettanet] ..., ?

[fn:skos] Simple Knowledge Organization System (SKOS), W3C.

[fn:thrift] [[https://thrift.apache.org/docs/idl][Thrift interface description language]], Apache Software Foundation


