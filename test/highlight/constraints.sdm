module Campaign is
; <- keyword
;      ^ module.definition
;               ^ keyword

  @skos:prefLabel = "Example"
  ; <- property
  ;^ property
  ;               ^ operator
  ;                 ^ string

  entity Campaign is
  ; <- keyword
  ;      ^ type.definition
  ;               ^ keyword

    identity a -> CampaignId
    ; <- keyword
    ;        ^ variable.field
    ;          ^ operator
    ;             ^ type

    b -> xsd:string is
    ; <- variable.field
    ; ^ operator
    ;    ^ type
    ;               ^ keyword

      assert not_null = "self is not null"
      ; <- keyword
      ;      ^ property
      ;               ^ operator
      ;                 ^ embedded

    end
    ; <- keyword

    c -> Target is
    ; <- variable.field
    ; ^ operator
    ;    ^ type
    ;           ^ keyword

      assert tagged_with_foo is
      ; <- keyword
      ;      ^ property
      ;                      ^ keyword

        ∀ self, ( contains(self.tags "foo") )
        ; <- operator
        ;   ^ variable.builtin
        ;         ^ punctuation.bracket
        ;           ^ function.call
        ;                   ^ punctuation.bracket
        ;                     ^ variable.builtin
        ;                        ^ operator
        ;                         ^ function.call
        ;                              ^ string
        ;                                   ^ punctuation.bracket
        ;                                     ^ punctuation.bracket
      end
      ; <- keyword

    end
    ; <- keyword

    d -> Target is
    ; <- variable.field
    ; ^ operator
    ;    ^ type
    ;           ^ keyword

      assert tagged_with_foo_path with
      ; <- keyword
      ;      ^ property
      ;                           ^ keyword


        def foo -> string := "foo"
        ; <- keyword
        ;   ^ function.definition
        ;       ^ operator
        ;          ^ type.builtin
        ;                 ^ operator
        ;                     ^ string

        is
        ; <- keyword

        ∀ self, ( self.tags.contains(foo) )
        ; <- operator
        ;   ^ variable.builtin
        ;         ^ punctuation.bracket
        ;           ^ variable.builtin
        ;               ^ operator
        ;                ^ function.call
        ;                    ^ operator
        ;                     ^ function.call
        ;                             ^ punctuation.bracket
        ;                                 ^ punctuation.bracket
        ;                                   ^ punctuation.bracket

      end
      ; <- keyword

    end
    ; <- keyword

    e -> Target is
    ; <- variable.field
    ; ^ operator
    ;    ^ type
    ;           ^ keyword

      assert tagged_with_foo_builder is
      ; <- keyword
      ;      ^ property
      ;                              ^ keyword


        ∀ self, (
        ; <- operator
        ;   ^ variable.builtin
        ;         ^ punctuation.bracket

          ¬is_empty(
          ; <- operator
          ; ^ function.call
          ;         ^ punctuation.bracket

            {t | t in self.tags, t = "foo"}
            ; <- punctuation.bracket
            ;  ^ punctuation.separator
            ;    ^ variable.parameter
            ;      ^ keyword
            ;         ^ variable.builtin
            ;             ^ operator
            ;              ^ function.call
            ;                      ^ operator
            ;                        ^ string
            ;                             ^ punctuation.bracket
          )
        ; ^ punctuation.bracket
        )
        ; <- punctuation.bracket
      end
      ; <- keyword
    end
    ; <- keyword

    f -> Target is
    ; <- variable.field
    ; ^ operator
    ;    ^ type
    ;           ^ keyword

      assert tagged_with_parent_tags is
      ; <- keyword
      ;      ^ property
      ;                              ^ keyword

        ∀ self, (
        ; <- operator
        ;   ^ variable.builtin
        ;         ^ punctuation.bracket

          ∃ tag ∈ self.container.tags,
          ;<- operator
          ;   ^ variable.parameter
          ;       ^ operator
          ;           ^ variable.builtin
          ;               ^ operator
          ;                ^ function.call
          ;                         ^ operator
          ;                          ^ function.call

            self.tags.contains(tag)
            ; <- variable.builtin
            ;   ^ operator
            ;    ^ function.call
            ;        ^ operator
            ;         ^ function.call
            ;                 ^ punctuation.bracket
            ;                     ^ punctuation.bracket

        )
        ; <- punctuation.bracket

      end
      ; <- keyword

    end
    ; <- keyword

  end
  ; <- keyword

end
; <- keyword
