#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<app:syntax>>Appendix: Complete Surface Syntax Grammar

The grammar of the surface syntax is presented in Extended Backus–Naur form (EBNF)[fn:ebnf]. The addition of a character literal
range operation =..= reduces the number of single character alternatives for clarity. There are also a set of pre-defined
terminals such as =ASCII_DIGIT=, =ASCII_HEX_DIGIT=, =UC_LETTER_UPPER=, and =UC_LETTER_LOWER= used to simplify character ranges.

#+BEGIN_SRC ebnf
Module              = "module", Identifier, ModuleBase?, ModuleBody

ModuleBase          = "base", IriReference

ModuleBody          = "is", ImportStatement*, Annotation*, Definition*, "end"

MemberImport        = QualifiedIdentifier

ModuleImport        = Identifer

Import              = MemberImport | ModuleImport

ImportStatement     = "import", ( Import | "[", Import+, "]" )

Annotation          = AnnotationProperty | Constraint

AnnotationProperty  = "@", IdentiferReference, "=", Value

Constraint          = InformalConstraint | FormalConstraint

InformalConstraint  = "=", QuotedString

FormalConstraint    = ?see below?

Definition          =
    DataTypeDef | EntityDef | EnumDef | EventDef | StructureDef | UnionDef | PropertyDef

DataTypeDef         =
    "datatype", Identifier, "<-", DataTypeBase, AnnotationOnlyBody?

DataTypeBase        = IdentifierReference | BuiltinSimpleType

AnnotationOnlyBody  = "is", Annotation+, "end"

EntityDef           = "entity", Identifier, EntityBody?

EntityBody          =
    "is",
    Annotation*, IdentityMember, ( MemberByValue | MemberByReference | EntityGroup )*,
    "end"

EntityGroup         = "group", Annotation*, ( MemberByValue | MemberByReference )+, "end"

EnumDef             = "enum", Identifier, EnumBody?

EnumBody            = "of", Annotation*, ValueVariant+, "end"

ValueVariant        = Identifier, "=", Unsigned, AnnotationOnlyBody?

EventDef            =
    "event", Identifier, "source", IdentifierReference, StructureBody?

StructureDef        = "structure", Identifier, StructureBody?

StructureBody       = "is", Annotation*, ( MemberByValue | StructureGroup )*, "end"

StructureGroup      = "group", Annotation*, MemberByValue+, "end"

UnionDef            = "union", Identifier, UnionBody?

UnionBody           = "of", Annotation*, TypeVariant+, "end"

TypeVariant         = IdentifierReference, TypeVariantRename?, AnnotationOnlyBody?

TypeVariantRename   = "as" Identifier

PropertyDef         = "property", Identifier, PropertyBody?

PropertyBody        = "is", Annotation*, PropertyRole+, "end"

PropertyRole        =
    Identifier, ( "ref", Cardinality )?, TypeExpressionTo, AnnotationOnlyBody?

PropertyMember      = "as", Identifier

IdentityMember      =
    "identity", Identifier, ( PropertyMember | ( TypeExpressionTo, AnnotationOnlyBody? ) )

MemberByValue       =
    Identifier, ( PropertyMember | ( TypeExpressionTo, AnnotationOnlyBody? ) )

MemberByReference   =
    "ref", Identifier, ( PropertyMember | ( TypeExpressionFromTo, AnnotationOnlyBody? ) )

TypeExpression      = "->" TypeReference

TypeExpressionTo    = "->" Cardinality?, TypeReference

TypeExpressionFromto = Cardinality?, TypeExpressionTo

TypeReference       =  UnknownType | IdentifierReference | BuiltinSimpleType

UnknownType         = "unknown"

Cardinality         = "{", Unsigned, CardinalityRange?, "}"

CardinalityRange    = "..", Unsigned?

Value               =
    SimpleValue | ValueConstructor | IdentifierReference | ListOfValues

BuiltinSimpleType   = 
    "string" | "double" | "decimal" | "integer" | "boolean" | "iri"

SimpleValue         =
    String | Double | Decimal | Integer | Boolean | IriReference

Boolean             = Tautology | Contradiction

Tautology           = ( "true" | "⊤" )

Contradiction       = ( "false" | "⊥" )

NumericSign         = "+" | "-"

Zero                = "0"

NonZero             = "1".."9"

Unsigned            = Zero | NonZero, ( ASCII_DIGIT )*

Integer             = NumericSign?, Unsigned

Decimal             = Integer, ".", ( ASCII_DIGIT )+

ExponentChar        = "e" | "E"

Double              = Decimal, ExponentChar, NumericSign?, Integer

HexPair             = ASCII_HEX_DIGIT, ASCII_HEX_DIGIT

CharacterEscape     = "\\", ( "\"" | "\\" | "\/" | "a" | "b"
                          "e" | "f" | "n" | "r" | "t" | "v" )

UnicodeEscape       = "\\u{", HexPair, ( HexPair ( HexPair )? )?, "}"

NotAllowed          = "\"" | "\\" | "\u{00}".."\u{08}" | "\u{0B}".."\u{1F}" | "\u{7F}"

QuotedString        = "\"", ( -NotAllowed | CharacterEscape | UnicodeEscape )*, "\""

LanguageTag         =
    "@", ASCII_LETTER_LOWER, ASCII_LETTER_LOWER, ASCII_LETTER_LOWER?
        ( "-", ASCII_LETTER_UPPER, ASCII_LETTER_UPPER, ASCII_LETTER_UPPER )?
        ( "-", ASCII_LETTER_UPPER, ASCII_LETTER_LOWER,
               ASCII_LETTER_LOWER, ASCII_LETTER_LOWER )?
        ( "-", ( ( ASCII_LETTER_UPPER, ASCII_LETTER_UPPER )
               | ( ASCII_DIGIT, ASCII_DIGIT, ASCII_DIGIT ) ) )

String              = QuotedString, LanguageTag?

IriReference        =
    "<",
    (
    - ("<" | ">" | "\"" | "{" | "}" | "|" | "^" | "`" | "\\" | "\u{00}".."\u{20}")
    | UnicodeEscape
    )*,
    ">"

ValueConstructor    = IdentifierReference, "(", SimpleValue, ")"

ListOfValues        =
    "[", ( SimpleValue | ValueConstructor | IdentifierReference )+, "]"

IdentifierInitial   = UC_LETTER_UPPER | UC_LETTER_LOWER

IdentifierChar      = IdentifierInitial | UC_NUMBER_DECIMAL

Identifier          = IdentifierInitial, IdentifierChar*, ( "_", IdentifierChar+ )*

QualifiedIdentifier = Identifier, ":", Identifier

IdentifierReference = QualifiedIdentifier | Identifier

LineComment         = ";", ( -( "\r" | "\n" ) )*

Whitespace          =
    "\f" | "\n" | "\r" | "\t" | "\v"
    | "\u{0020}" | "\u{00a0}" | "\u{1680}" | "\u{2000}".."\u{200a}"
    | "\u{2028}" | "\u{2029}" | "\u{202f}" | "\u{205f}" | "\u{3000}"
    | "\u{feff}"
#+END_SRC


** The Embedded Constraint Language

Given that the /formal/ constraint language component of SDML is likely to be used less frequently *and* the grammar is
fairly long we have made it a separate section.

#+BEGIN_SRC ebnf
FormalConstraint    = "is", ConstraintEnvironment?, ConstraintSentence, "end"

ConstraintEnvironment = EnvironmentDef+, "in"

ConstraintSentence  =
    SimpleSentence | BooleanSentence | QuantifiedSentence |
        "(", ConstraintSentence, ")"

SimpleSentence      = Atomic | Equation

Atomic              = Term, "(", Term*, ")"

Equation            = Term, "=", Term

BooleanSentence     =
    Negation |
    ConstraintSentence,
        (
          Conjunction | Disjunction | ExclusiveDisjunction |
          Implication | Biconditional
        )

Negation            = ( "not" | "¬" ), ConstraintSentence

Conjunction         = ( "and" | "∧" ), ConstraintSentence

Disjunction         = ( "or" | "∨" ), ConstraintSentence

ExclusiveDisjunction = ( "xor" | "⊻" ), ConstraintSentence

Implication         = ( "implies" | "⇒" ), ConstraintSentence

Biconditional       = ( "iff" | "⇔" ), ConstraintSentence

QuantifiedSentence  = Universal | Existential

Universal           = ( "forall" | "∀" ), QuantifierBinding*, QuantifiedBody

Existential         = ( "exists" | "∃" ), QuantifierBinding*, QuantifiedBody

QuantifierBinding   = "self" | ( Identifer, BindingTarget )

BindingTarget       =
    BindingFromType | BindingFromSequence | "(", BindingTarget, ")"

BindingFromType     = "->", ( "Self" | IdentifierReference )

BindingFromSequence =
    ( "in" "∈" ), ( NamePath | IdentifierReference | SequenceComprehension )
 
QuantifiedBody      = "(", ConstraintSentence, ")"

Term                =
    NamePath | IdentifierReference | PredicateValue | FunctionalTerm | SequenceComprehension

NamePath            = ( "self" | "Self" | Identifier ), ( ".", Identifier )+

PredicateValue      =
    SimpleValue | ListOfPredicateValues

ListOfPredicateValues = "[", SimpleValue*, "]"

FunctionalTerm      = Term, "(", Term*, ")"
#+END_SRC

** Constraint Function Definitions

#+BEGIN_SRC ebnf
EnvironmentDef      =
    "def", Identifier, FunctionSignature?,
        ( ":=" | "≔" ), ( PredicateValue | ConstraintSentence )

FunctionSignature   = "(", Parameter+, ")", "->", FunctionalType

Parameter           = ( Identifier, "->" )?, FunctionalType

FunctionalType      =  "_" | "CollectionType | TypeReference

CollectionType      = BuiltinCollectionType, "of", ( "_" | TypeReference )

BuiltinCollectionType =
    "Bag" | "List" | "Maybe" | "OrderedSet" | "Sequence" | "Set"
#+END_SRC

** Sequence Comprehensions

#+BEGIN_SRC ebnf
SequenceComprehension = "{", ReturnValues, "|", Expression "}"

ReturnValues          = Identifier | ( "[", Identifier+, "]" )

Expression            =
    BooleanExpression | BindingExpression | ConstraintSentence | ( "(", Expression ")" )

BooleanExpression     =
    ExpressionNegation
    | ( Expression, (
        ExpressionConjunction,
        ExpressionExclusiveDisjunction,
        ExpressionDisjunction,
        )
    )

ExpressionNegation   = ( "not" | "¬" ), Expression

ExpressionConjunction =
    ( "and" | "∧" ), Expression

ExpressionExclusiveDisjunction =
    ( "xor" | "⊻" ), Expression

ExpressionDisjunction =
    ( "or" | "∨" ), Expression

BindingExpression    =
    ( "exists" | "∃" )?, Identifier, ( BindingFromType | BindingFromSequence )
#+END_SRC


# ----- Footnotes

[fn:ebnf] [[https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form][Extended Backus-Naur Form (EBNF)]], Wikipedia
