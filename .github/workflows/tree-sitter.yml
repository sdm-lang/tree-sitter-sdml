name: Tree-Sitter CI

on:
  push:
    branches: [master]
    paths:
      - "**"
      - "!/*.md"
      - "!/LICENSE*"

  pull_request:
    paths:
      - "**"
      - "!/*.md"
      - "!/LICENSE*"

  workflow_dispatch:

env:
  GRAMMAR_NAME: sdml
  BUILD_OUTPUT_DIR: build
  EXAMPLES_DIR: examples
  EM_VERSION: 4.0.16
  NODE_VERSION: 20

jobs:
  generate:
    name: Generate parser
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2
        with:
          install-lib: false

      - name: Run parser generator
        run: tree-sitter generate

  test:
    name: Run tests
    needs: [generate]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Run included tests
        uses: tree-sitter/parser-test-action@v3
        with:
          test-rust: true

  examples:
    name: Parse example files
    needs: [generate]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Parse example files
        uses: tree-sitter/parse-action@v4
        id: examples
        continue-on-error: true
        with:
          files: |-
            ${{ env.EXAMPLES_DIR }}/**

      - name: Upload errors
        uses: actions/upload-artifact@v4
        if: steps.examples.outputs.failures != ''
        with:
          name: failures
          path: ${{steps.examples.outputs.failures}}

  build-lib:
    name: Build parser library
    needs: [test]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup environment
        run: |-
          echo "BUILD_OUTPUT=${{ env.BUILD_OUTPUT_DIR }}/lib${{ env.GRAMMAR_NAME }}.so" >> "$GITHUB_ENV"
            
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Make output directory
        run: mkdir -p ${{ env.BUILD_OUTPUT_DIR }}

      - name: Build core library
        run: tree-sitter build --output "$BUILD_OUTPUT"

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: Parser library (${{ matrix.os }})
          path: "$BUILD_OUTPUT"

  build-wasm:
    name: Build WASM bindings
    needs: [build-lib]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup environment
        run: |-
          echo "BUILD_OUTPUT=${{ env.BUILD_OUTPUT_DIR }}/lib${{ env.GRAMMAR_NAME }}.wasm" >> "$GITHUB_ENV"
            
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Setup Emscripten tooling
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EM_VERSION }}

      - name: Verify Emscripten install
        run: emcc --version

      - name: Build wasm library
        run: tree-sitter build --wasm --output "$BUILD_OUTPUT"

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: WASM library (${{ matrix.os }})
          path: "$BUILD_OUTPUT"

  build-node:
    name: Build Node bindings
    needs: [build-lib]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup environment
        run: |-
          echo "BUILD_OUTPUT=${{ env.BUILD_OUTPUT_DIR }}/lib${{ env.GRAMMAR_NAME }}_binding.node" >> "$GITHUB_ENV"
            
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        run: npm install

      - name: Install Node-Gyp
        run: npm install -g node-gyp

      - name: Build Node bindings
        run: node-gyp configure && node-gyp build

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: Node bindings (${{ matrix.os }})
          path: "$BUILD_OUTPUT"

  build-rust:
    name: Build Rust bindings
    needs: [build-lib]
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        kind: ["debug", "release"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup environment
        run: |-
          echo "RUST_OUTPUT_DIR=${{ env.BUILD_OUTPUT_DIR }}/target" >> "$GITHUB_ENV"
          echo "BUILD_OUTPUT=${{ env.RUST_OUTPUT_DIR }}/${{ matrix.kind }}/lib${{ env.GRAMMAR_NAME }}.rlib" >> "$GITHUB_ENV"
            
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup tree-sitter tooling
        uses: tree-sitter/setup-action@v2

      - name: Build Rust bindings
        run: cargo build --target-dir "$RUST_OUTPUT_DIR"

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: Rust library (${{ matrix.os }}/${{ matrix.kind }})
          path: "$BUILD_OUTPUT"
