#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<app:uml-profile>>Appendix: UML Profile for SDML

This section describes a *non-normative* UML Profile for SDML that allows the diagrammatic presentation of an SDML model.

Based upon the [[https://www.omg.org/spec/UML/2.5.1/About-UML][Unified Modeling Language 2.5.1]].

** The Profile

A UML profile creates a specific sub-language that utilizes the structure and semantics of UML but constrained and
tailored to a specific domain. In this case the profile creates a way to use UML to visualize the structure of an SDML
module as well as the dependencies between modules. Figure [[fig:uml-profile-package]] it the top-level of the profile and
shows the set of /stereotypes/ used to represent the elements of SDML. 
 
#+NAME: fig:uml-profile-package
#+BEGIN_SRC plantuml :file uml-profile-package.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package "UML 2.5" as uml <<Metamodel>> #white {
}

package sdml <<profile>> {
  class module <<stereotype>> {}
  class datatype <<stereotype>> {}
  class entity <<stereotype>> {}
  class event <<stereotype>> {}
  class property <<stereotype>> {}
  class role <<stereotype>> {}
  class source <<stereotype>> {}
  class identity <<stereotype>> {}
  class ref <<stereotype>> {}
}

sdml ..> uml: <<references>>
#+END_SRC

#+CAPTION: The «sdml» Profile Package
#+RESULTS: fig:uml-profile-package
[[file:uml-profile-package.svg]]

*Example: Applying the Profile*

Figure [[fig:uml-ex-profile-applied]] shows how the SDML profile is applied to a model; note that some tools have alternative
methods for applying profiles to a model.

#+NAME: fig:uml-ex-profile-applied
#+BEGIN_SRC plantuml :file uml-ex-profile-applied.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package rentals <<model>> {
}
package sdml <<profile>> #white {
}

rentals .> sdml: <<apply>>
#+END_SRC

#+CAPTION: Applying the Profile
#+RESULTS: fig:uml-ex-profile-applied
[[file:uml-ex-profile-applied.svg]]

** Modules

The SDML profile introduces a stereotype /module/ that may then be applied to a package within the model to denote a named
module.

#+NAME: fig:uml-profile-module
#+BEGIN_SRC plantuml :file uml-profile-module.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 40

hide circle
hide members

class Package <<Metaclass>> #white {}
class module <<stereotype>> {}
module -up-> Package: <<extension>>

note left of module
**context** module **inv**:
    self.packagedElement
        →forAll(
            e | (
                    isDataTypeDef(e) **or**
                    isEntityDef(e) **or**
                    isEnumerationDef(e) **or**
                    isEventDef(e) **or**
                    isStructureDef(e) **or**
                    isUnionDef(e) **or**
                    isPropertyDef(e)
                ) **and** **not** isModuleDef(e)
        )
end note

note bottom of module
**context** module
    **static** **def**: isInModule(e : PackageableElement) isModuleDef(e.owningPackage)
    **static** **def**: isModuleDef(e : PackageableElement)
       e→oclIsTypeOf(Package) **and** e.stereotype.name = "module"
    **static** **def**: isDatatypeDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(PrimitiveType) **and** e.stereotype.name = "datatype"
    **static** **def**: isEnumDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(Enumeration) **and** e.stereotype.name = "enum"
    **static** **def**: isEntityDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(Class) **and** e.stereotype.name = "entity"
    **static** **def**: isEventDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(Class) **and** e.stereotype.name = "event"
    **static** **def**: isStructureDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(Class) **and** e.stereotype.name = "structure"
    **static** **def**: isUnionDef(e : PackageableElement)
       isInModule(e) **and** e→oclIsTypeOf(Class) **and** e.stereotype.name = "union"
    **static** **def**: isPropertyDef(e : PackageableElement)
        isInModule(e) **and** e→oclIsTypeOf(Class) **and** e.stereotype.name = "property"
end note
#+END_SRC

#+CAPTION: The «module» Stereotype
#+RESULTS: fig:uml-profile-module
[[file:uml-profile-module.svg]]

*Constraints*

A module with the stereotype ~«module»~ applied:

1. MUST contain ONLY the datatype, enumeration, entity, event, structure, union, and property elements of the SDML
   profile.
2. MUST NOT contain a nested module.

The constraint below the module in the previous figure defines a set of functions used to construct other constraints in
this section.

*Example: An Empty Module*

The following is our example empty module.

#+BEGIN_SRC sdml :exports code :noeval
module rentals is end
#+END_SRC

This empty module above will transform into the following UML.

#+NAME: fig:uml-ex-module
#+BEGIN_SRC plantuml :file uml-ex-module.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package rentals-model <<sdml>> {
  package rentals <<module>> {
  }
}
#+END_SRC

#+CAPTION: An Empty Module
#+RESULTS: fig:uml-ex-module
[[file:uml-ex-module.svg]]

** Imports

Import statements in SDML target either a module, or members within a module by qualified name. UML on the other hand
has two separate import relations, =ImportElement= and =ImportPackage=. Importing a package in UML brings all the public
elements of the package into the current namespace unqualified. In SDML there is no way to reference an external
definition unqualified, so this profile only uses element import.

#+NAME: fig:uml-ex-imports-profile
#+BEGIN_SRC plantuml :file uml-ex-imports-profile.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

class ElementImport <<Metaclass>> #white {}

class import <<stereotype>> {}

import -up-> ElementImport: <<extension>>

note left of import
**context** import **inv**:
    isModuleDef(self.importingNamespace)
end note

note right of import
**context** import **inv**:
    self.importedElement
        →forAll(
            e | isDataTypeDef(e) **or**
                isEntityDef(e) **or**
                isEnumerationDef(e) **or**
                isEventDef(e) **or**
                isStructureDef(e) **or**
                isUnionDef(e) **or**
                isPropertyDef(e) **or**
                isModuleDef(e)
        )   
end note
#+END_SRC

#+CAPTION: The «import» Stereotype
#+RESULTS: fig:uml-ex-imports-profile
[[file:uml-ex-imports-profile.svg]]

*Constraints*

TBD

*Example: Importing a Module*

The following demonstrates the importing of the module named ~sdml~ into the current module. Following the notation in
section 7.4.4 of the UML specification, imports are represented with a dashed line and the keyword =«import»=.

#+BEGIN_SRC sdml :exports code :noeval
module rentals is
  import sdml
end
#+END_SRC

#+NAME: fig:uml-ex-module-imports
#+BEGIN_SRC plantuml :file uml-ex-module-imports.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package rentals <<module>> {
}
package sdml <<module>> #white {
}

rentals .> sdml: <<import>>
#+END_SRC

#+CAPTION: Importing a Module
#+RESULTS: fig:uml-ex-module-imports
[[file:uml-ex-module-imports.svg]]

*Example: Importing Module Members*

The following demonstrates the importing of the members named ~dc:description~ and ~skos:prefLabel~ into the current module.

#+BEGIN_SRC sdml :exports code :noeval
module rentals is
  import skos:prefLabel
  import dc:description
end
#+END_SRC

#+NAME: fig:uml-ex-member-imports
#+BEGIN_SRC plantuml :file uml-ex-member-imports.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package rentals <<module>> {
}
package skos <<module>> #white {
    class prefLabel {}
}
package dc <<module>> #white {
    class description {}
}

rentals ..left..> prefLabel: <<import>>
rentals ..right..> description: <<import>>
#+END_SRC

#+CAPTION: Importing Module Members
#+RESULTS: fig:uml-ex-member-imports
[[file:uml-ex-member-imports.svg]]

** Annotations

TBD

** Data Type Definitions

The profile element =«datatype»= is a specialization of the UML =PrimitiveType= (section 10.2.3.2 of the UML specification)
classifier.

#+NAME: fig:uml-profile-datatype
#+BEGIN_SRC plantuml :file uml-profile-datatype.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

class PrimitiveType <<Metaclass>> #white {}
class datatype <<stereotype>> {}
datatype -up-> PrimitiveType: <<extension>>

note left of datatype
,**context** datatype **inv**:
    self.generalization
        →size() = 1 **and**
    self.generalization
        →forAll(e | isDatatypeDef(e.general))
end note
#+END_SRC

#+CAPTION: The «datatype» Stereotype
#+RESULTS: fig:uml-profile-datatype
[[file:uml-profile-datatype.svg]]

*Example: A Datatype Example*

The following simple datatype definition restricts the type ~sdml:string~.

#+BEGIN_SRC sdml :exports code :noeval
module rentals is

  datatype VehicleIdNumber <- string

end
#+END_SRC

#+NAME: fig:uml-ex-datatype
#+BEGIN_SRC plantuml :file uml-ex-datatype.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

package rentals <<module>> {
    class sdml::string <<datatype>> #white {}
    class VehicleIdNumber <<datatype>> {}
    VehicleIdNumber -u-|> sdml::string
}
#+END_SRC

#+CAPTION: A Datatype Example
#+RESULTS: fig:uml-ex-datatype
[[file:uml-ex-datatype.svg]]

** Entity Definitions

#+NAME: fig:uml-profile-entity
#+BEGIN_SRC plantuml :file uml-profile-entity.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide members

class Class <<Metaclass>> #white {}
class entity <<stereotype>> {}
entity -up-> Class: <<extension>>
#+END_SRC

#+CAPTION: The «entity» Stereotype
#+RESULTS: fig:uml-profile-entity
[[file:uml-profile-entity.svg]]



#+NAME: fig:uml-profile-identity-members
#+BEGIN_SRC plantuml :file uml-profile-identity-members.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 200

hide circle
hide members

class entity <<stereotype>> {}
class Property <<Metaclass>> #white {}

class identity <<stereotype>> {}
identity -up-> Property: <<extension>>
identity "+identityMember\l{subsets ownedAttribute}\n1" --right--> "+owningEntity\r{renames class}\n1" entity

note left of identity
,**context** identity **inv**:
    ,**let** t = self.type **in**
        isDatatypeDef(t) **or**
        isEnumerationDef(t) **or**
        isStructureDef(t) **or**
        isUnionDef(t)
end note

note bottom of identity
,**context** identity **inv**:
    ,**let** c = self.class **in**
        isEntityDef(c) **or** isPropertyDef(c)
end note
#+END_SRC

#+CAPTION: The «identity» Stereotypes
#+RESULTS: fig:uml-profile-identity-members
[[file:uml-profile-identity-members.svg]]

!!!

#+NAME: fig:uml-profile-ref-members
#+BEGIN_SRC plantuml :file uml-profile-ref-members.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 200

hide circle
hide members

class entity <<stereotype>> {}
class Property <<Metaclass>> #white {}

class ref <<stereotype>> {}
ref -up-> Property: <<extension>>
ref "+refMember\l{subsets ownedAttribute}" --right--> "+owningEntity\r{renames class}" entity

note left of ref
**context** ref **inv**:
    **let** t = self.type **in**
        isDatatypeDef(t) **or**
        isEntityDef(t) **or**
        isEnumerationDef(t) **or**
        isStructureDef(t) **or**
        isUnionDef(t)
end note

note bottom of ref
,**context** ref **inv**:
    ,**let** c = self.class **in**
        isEntityDef(c) **or** isPropertyDef(c)
end note
#+END_SRC

#+CAPTION: The and «ref» Stereotypes
#+RESULTS: fig:uml-profile-ref-members
[[file:uml-profile-ref-members.svg]]

For details on by-value members and groups see section [[sec:uml-structures]] below.

*Constraints*

1. The =«identity»= stereotype renames the meta-association =class= to =owningEntity=, with type =«entity»= and multiplicity
   =1..1=.
2. The =«identity»= stereotype
3. The =«ref»= stereotype 

*Example: An Entity Example*

#+BEGIN_SRC sdml :exports code :noeval
module rentals is

  import uuid

  datatype VehicleIdNumber <- string

  entity Vehicle is
    identity vin -> VehicleIdNumber
  end

  entity Booking is
    identity id -> uuid::Uuid
    ref vehicle -> {0..1} Vehicle
  end

end
#+END_SRC

#+NAME: fig:uml-ex-entity
#+BEGIN_SRC plantuml :file uml-ex-entity.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide circle
hide empty members

package rentals <<module>> {
    class "sdml::string" as string <<datatype>> #white {}
    class VehicleIdNumber <<datatype>> {}
    class Vehicle <<entity>> {}
    class Booking <<entity>> {
        <<identity>> +id: uuid::Uuid
    }
    VehicleIdNumber -up-|> string
    Booking "\l0..1" o--r-> "\r0..1" Vehicle: <<ref>>
    Vehicle "\l1" *--r--> "+vin\r1" VehicleIdNumber: <<identity>>
}
#+END_SRC

#+CAPTION: An Entity Example
#+RESULTS: fig:uml-ex-entity
[[file:uml-ex-entity.svg]]

** Enumeration Definitions


#+NAME: fig:uml-profile-enum
#+BEGIN_SRC plantuml :file uml-profile-enum.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 280

hide circle
hide members

class Enumeration <<Metaclass>> #white {}
class enum <<stereotype>> {}
enum -up-> Enumeration: <<extension>>

class EnumerationLiteral <<Metaclass>> #white {}
Enumeration "{subsets namespace}\l+enumeration\l1" *--right-- "{ordered, subsets ownedMember}\r+ownedLiteral\r*" EnumerationLiteral

note bottom of enum
,**context** enum **inv**:
    self.ownedLiteral→size() = 1 **and**
    self.ownedLiteral→forAll(
        e | e.classifier→size() = 1 **and**
            e.classifier→forAll(e | e = LiteralInteger and e ≥ 0) **and**
            self.ownedLiteral→collect(l | l.value)→asSet()→size()
                = self.ownedLiteral→collect(l | l.value)→size()
    )
end note
#+END_SRC

#+CAPTION: The «enum» Stereotype
#+RESULTS: fig:uml-profile-enum
[[file:uml-profile-enum.svg]]

The standard =Enumeration= classifier is used to model enum definitions.
The standard =EnumerationLiteral= instance is used to model value variants.

*Constraints*

*Example: An Example Enumeration*


#+BEGIN_SRC sdml :exports code :noeval
module rentals is

  enum VehicleClass of
    SubCompact = 0
    Compact = 1
    MidSize = 2
    FullSize = 3
    CompactSuv = 4
    FullSizeSuv = 5
  end

end
#+END_SRC


#+NAME: fig:uml-ex-enum
#+BEGIN_SRC plantuml :file uml-ex-enum.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide methods

enum VehicleClass <<enum>> {
    SubCompact = 0
    Compact = 1
    MidSize = 2
    FullSize = 3
    CompactSuv = 4
    FullSizeSuv = 5    
}
#+END_SRC

#+CAPTION: An Example Enumeration 
#+RESULTS: fig:uml-ex-enum
[[file:uml-ex-enum.svg]]

** Event Definitions

The standard =Signal= (10.3.3.1) and =Dependency=

#+NAME: fig:uml-profile-event
#+BEGIN_SRC plantuml :file uml-profile-event.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 140

hide circle
hide empty members

class entity <<stereotype>> {}

class Signal <<Metaclass>> #white {}
class event <<stereotype>> {}
event -up-> Signal: <<extension>>

class Dependency <<Metaclass>> #white {}
class source <<stereotype>> {}
source -up-> Dependency: <<extension>>

source -left-> "+eventSource\l{subsets supplier}\l1" entity
source -right-> "+event\r{subsets client}\r1" event

note bottom of event
**context** entity **inv**:
    self.ownedAttribute
        →collect(e | e→oclIsTypeOf(source))
        →size() = 1
end note
#+END_SRC

#+CAPTION: The «event» and «source» Stereotypes
#+RESULTS: fig:uml-profile-event
[[file:uml-profile-event.svg]]

For details on by-value members and groups see section [[sec:uml-structures]] below.

*Example: An Example Event*

#+BEGIN_SRC sdml :exports code :noeval
module rentals is

  import uuid

  entity Booking is
    identity id -> uuid:Uuid
  end

  event VehicleAssigned source Booking

end
#+END_SRC

#+NAME: fig:uml-ex-event
#+BEGIN_SRC plantuml :file uml-ex-event.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide empty members

package rentals <<module>> {
    class VehicleAssigned <<event>> {}
    class Booking <<entity>> {
        + <<identity>> id: uuid::Uuid
    }
    VehicleAssigned .r.> Booking: <<source>>
}
#+END_SRC

#+CAPTION: An Example Event
#+RESULTS: fig:uml-ex-event
[[file:uml-ex-event.svg]]

** <<sec:uml-structures>>Structure Definitions

TBD

*Example:*

TBD

** Union Definitions

Generalization Sets (9.7)

#+NAME: fig:uml-profile-union
#+BEGIN_SRC plantuml :file uml-profile-union.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 140

hide circle
hide empty members

class Class <<Metaclass>> #white
class GeneralizationSet <<Metaclass>> #white
class Generalization <<Metaclass>> #white

Class --left--> "+powertypeExtent\l*" GeneralizationSet
GeneralizationSet --left--> "+generalization\l*" Generalization

class union <<stereotype>>
union -up-> Class: <<extension>>

note bottom of union
,**context** union **inv**:
    self.powertypeExtent→size() ≤ 1 **and**
    self.powertypeExtent→forAll(
        e | e.isCovering = true **and**
            e.isDisjoint = true **and**
            e.generalization→forAll(
                e | e→oclIsTypeOf(typeVariant)
            )
    )
end note

class variant <<stereotype>>
variant -up->  Generalization: <<extension>>

note bottom of variant
,**context** variant **inv**:
    self.general→oclIsTypeOf(union) **and**
    ,**let** s = self.specific **in**
        isDatatypeDef(s) **or**
        isEventDef(s) **or**
        isEnumDef(s) **or**
        isStructureDef(s) **or**
        isUnionDef(s)
end note
#+END_SRC

#+CAPTION: The «union» and «variant» Stereotypes
#+RESULTS: fig:uml-profile-union
[[file:uml-profile-union.svg]]

*Constraints*


*Example: An Example Union*

#+BEGIN_SRC sdml :exports code :noeval
module rentals is

  import uuid

  structure Car
  structure Van
  structure Truck

  union RentalClass of
    Car
    Van
    Truck
  end

end
#+END_SRC

#+NAME: fig:uml-ex-union
#+BEGIN_SRC plantuml :file uml-ex-union.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide circle
hide empty members

package rentals <<module>> {

    class Car <<structure>>
    class Van <<structure>>
    class Truck <<structure>>
    class RentalClass <<union>>

    Car -right-|> RentalClass: <<variant>>
    Van -up-|> RentalClass: <<variant>>
    Truck -left-|> RentalClass: <<variant>>
}
#+END_SRC

#+CAPTION: An Example Union
#+RESULTS: fig:uml-ex-union
[[file:uml-ex-union.svg]]

** Property Definitions

TBD

** Member Cardinality


UML

(section 7.5 -- Types and Multiplicities)
  
#+NAME: fig:uml-profile-cardinality
#+BEGIN_SRC plantuml :file uml-profile-cardinality.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 60

hide circle
hide empty members

abstract "**MultiplicityElement**" as me {
    + isOrdered : Boolean = false
    + isUnique : Boolean = true
    + /lower : Integer
    + /upper : UnlimitedNatural
}

abstract "**ValueSpecification**" as vs {}

me "{subsets owner}\l+owningLower\l0..1" *--right--> "{subsets ownedElement}\r+lowerValue\r0..1" vs
me "{subsets owner}\l+owningUpper\l0..1" *--right--> "{subsets ownedElement}\r+upperValue\r0..1" vs
#+END_SRC

#+CAPTION: UML Multiplicity Element
#+RESULTS: fig:uml-profile-cardinality
[[file:uml-profile-cardinality.svg]]

While the type =Integer= is clear in the UML above, the type =UnlimitedNatural= is best defined by the text from the UML
specification itself:

#+BEGIN_QUOTE
An instance of =UnlimitedNatural= is a value in the (infinite) set of natural numbers (0, 1, 2...) plus /unlimited/. The
value of /unlimited/ is shown using an asterisk (‘*’). =UnlimitedNatural= values are typically used to denote the upper
bound of a range, such as a multiplicity; /unlimited/ is used whenever the range is specified to have no upper bound.
#+END_QUOTE

Using the following example from the UML specification, actually combining the two diagrams from section 7.5.5 of the
specification into one.

#+NAME: fig:uml-profile-cardinality-example
#+BEGIN_SRC plantuml :file uml-profile-cardinality-example.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 120

hide circle
hide empty members

class "Customer" as c1 {
    + purchase : Purchase [*] {ordered, unique}
    + account : Account [0..5] {unique}
}

class Purchase
class Account
class "Customer" as c2

c1 -down[hidden]-> c2

c2 --left--> "purchase\l{ordered,unique}\l*" Purchase
c2 --right--> "account\r{unique}\r0..5" Account
#+END_SRC

#+CAPTION: UML Multiplicity Example
#+RESULTS: fig:uml-profile-cardinality-example
[[file:uml-profile-cardinality-example.svg]]

Either of these representations corresponds to the following SDML structure.

#+BEGIN_SRC sdml :exports code :noeval
module customer is

  structure Purchase
  structure Account

  structure Customer is
    purchase -> {ordered unique 0..} Purchase
    account -> {unique 0..5} Account
  end

end
#+END_SRC
