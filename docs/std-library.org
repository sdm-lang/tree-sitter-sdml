#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* Appendix: Standard Library

The standard library provided with SDML contains the language library itself, SDML modules representing commonly used
external namespaces, and a set of predicates and functions that are available for writing constraints.

** SDML Module

The ~sdml~ module contains the set of types that represent the language itself, most of which are only used in the writing
of constraints. However, the pre-defined simple types ~boolean~, ~decimal~, etc. are also defined here.

#+BEGIN_SRC sdml :noeval :exports code
module sdml base <http://sdml.io/sdml-owl.ttl#> is
  structure Datatype ;; ...
  structure Annotation ;; ...
  structure AnnotationProperty ;; ...
  structure ByReferenceMember ;; ...
  structure ByValueMember ;; ...
  structure Cardinality ;; ...
  structure Constraint ;; ...
  structure Definition ;; ...
  structure Entity ;; ...
  structure EntityGroup ;; ...
  structure EntityMember ;; ...
  structure Enumeration ;; ...
  structure Event ;; ...
  structure FormalConstraint ;; ...
  structure Identifier ;; ...
  structure IdentiferReference ;; ...
  structure IdentityMember ;; ...
  structure ImportStatement ;; ...
  structure Import ;; ...
  structure Member ;; ...
  structure MemberImport ;; ...
  structure Module ;; ...
  structure ModuleImport ;; ...
  structure Property ;; ...
  structure PropertyRole ;; ...
  structure QualifiedIdentifier ;; ...
  structure Structure ;; ...
  structure StructureGroup ;; ...
  structure TypeVariant ;; ...
  structure Union ;; ...
  structure ValueVariant ;; ...

  datatype boolean <- xsd:boolean ;; ...
  datatype unsigned <- xsd:unsignedLong ;; ...
  datatype integer <- xsd:long ;; ...
  datatype double <- xsd:double ;; ...
  datatype decimal <- xsd:decimal ;; ...
  datatype language <- xsd:language ;; ...
  datatype string <- xsd:string ;; ...
  datatype iri <- xsd:anyURI ;; ...
  datatype binary <- xsd:hexBinary ;; ...

  datatype u8 <- xsd:unsignedByte ;; ...
  datatype i8 <- xsd:byte ;; ...
  datatype u16 <- xsd:unsignedShort ;; ...
  datatype i16 <- xsd:short ;; ...
  datatype u32 <- xsd:unsignedInt ;; ...
  datatype i32 <- xsd:int ;; ...
  datatype u64 <- xsd:unsignedLong ;; ...
  datatype i64 <- xsd:long ;; ...

end
#+END_SRC

** Commonly Used Modules

*** Dublin Core Elements

This module 

#+BEGIN_SRC sdml :noeval :exports code
module dc base <http://purl.org/dc/elements/1.1/> is
  structure contributor ;; ...
  structure coverage ;; ...
  structure creator ;; ...
  structure date ;; ...
  structure description ;; ...
  structure format ;; ...
  structure identifier ;; ...
  structure language ;; ...
  structure publisher ;; ...
  structure relation ;; ...
  structure rights ;; ...
  structure source ;; ...
  structure subject ;; ...
  structure title ;; ...
  structure type ;; ...
end
#+END_SRC

*** DCMI Abstract Model

This module 

#+BEGIN_SRC sdml :noeval :exports code
module dcam base <http://purl.org/dc/dcam/> is
  structure VocabularyEncodingScheme ;; ...
  structure domainIncludes ;; ...
  structure memberOf ;; ...
  structure rangeIncludes ;; ...
end
#+END_SRC

*** DCMI Type Vocabulary

This module 

#+BEGIN_SRC sdml :noeval :exports code
module dcmi_type base <http://purl.org/dc/dcmitype/> is
 structure Collection ;; ...
  structure Dataset ;; ...
  structure Event ;; ...
  structure Image ;; ...
  structure InteractiveResource ;; ...
  structure MovingImage ;; ...
  structure PhysicalObject ;; ...
  structure Service ;; ...
  structure Software ;; ...
  structure Sound ;; ...
  structure StillImage ;; ...
  structure Text ;; ...
end
#+END_SRC

*** DCMI Metadata Terms 

This module 

#+BEGIN_SRC sdml :noeval :exports code
module dcterms base <http://purl.org/dc/terms/> is
  structure Agent ;; ...
  structure AgentClass ;; ...
  structure BibliographicResource ;; ...
  structure Box ;; ...
  structure DCMIType ;; ...
  structure DDC ;; ...
  structure FileFormat ;; ...
  structure Frequency ;; ...
  structure IMT ;; ...
  structure ISO3166 ;; ...
  structure ISO639_2 ;; ...
  structure ISO639_3 ;; ...
  structure Jurisdiction ;; ...
  structure LLC ;; ...
  structure LCSH ;; ...
  structure LicenseDocument ;; ...
  structure LinguisticSystem ;; ...
  structure Location ;; ...
  structure LocationPeriodOrJurisdiction ;; ...
  structure MESH ;; ...
  structure MediaType ;; ...
  structure MediaTypeOrExtent ;; ...
  structure MethodOfAccrual ;; ...
  structure MethodOfInstruction ;; ...
  structure NLM ;; ...
  structure Period ;; ...
  structure PeriodOfTime ;; ...
  structure PhysicalMedium ;; ...
  structure PhysicalResource ;; ...
  structure Point ;; ...
  structure Policy ;; ...
  structure ProvenanceStatement ;; ...
  structure RFC1766 ;; ...
  structure RFC3066 ;; ...
  structure RFC4646 ;; ...
  structure RFC5646 ;; ...
  structure RightsStatement ;; ...
  structure SizeOrDuration ;; ...
  structure Standard ;; ...
  structure TGN ;; ...
  structure UDC ;; ...
  structure URI ;; ...
  structure WthreeCDTF ;; ...
  structure abstract ;; ...
  structure accessRights ;; ...
  structure accrualMethod ;; ...
  structure accrualPeriodicity ;; ...
  structure accrualPolicy ;; ...
  structure alternative ;; ...
  structure audience ;; ...
  structure available ;; ...
  structure bibliographicCitation ;; ...
  structure conformsTo ;; ...
  structure contributor ;; ...
  structure coverage ;; ...
  structure created ;; ...
  structure creator ;; ...
  structure date ;; ...
  structure dateCopyrighted ;; ...
  structure dateSubmitted ;; ...
  structure description ;; ...
  structure educationLevel ;; ...
  structure extent ;; ...
  structure forma ;; ...
  structure hasFormat ;; ...
  structure hasPart ;; ...
  structure hasVersion ;; ...
  structure identifier ;; ...
  structure instructionalMethod ;; ...
  structure isFormatOf ;; ...
  structure isPartOf ;; ...
  structure isReferencedBy ;; ...
  structure isReplacedBy ;; ...
  structure isRequiredBy ;; ...
  structure isVersionOf ;; ...
  structure issued ;; ...
  structure language ;; ...
  structure license ;; ...
  structure mediator ;; ...
  structure medium ;; ...
  structure modified ;; ...
  structure provenance ;; ...
  structure publisher ;; ...
  structure references ;; ...
  structure relation ;; ...
  structure replaces ;; ...
  structure requires ;; ...
  structure rights ;; ...
  structure rightsHolder ;; ...
  structure source ;; ...
  structure spatial ;; ...
  structure subject ;; ...
  structure tableOfContents ;; ...
  structure temporal ;; ...
  structure title ;; ...
  structure type ;; ...
  structure valid ;; ...
end
#+END_SRC

*** The OWL 2 Schema Vocabulary 
This module 

#+BEGIN_SRC sdml :noeval :exports code
module owl base <http://www.w3.org/2002/07/owl#> is end
#+END_SRC

*** The RDF Concepts Vocabulary

This module 

#+BEGIN_SRC sdml :noeval :exports code
module rdf base <http://www.w3.org/1999/02/22-rdf-syntax-ns#> is
  structure Alt ;; ...
  structure Bag ;; ...
  structure CompoundLiteral ;; ...
  structure HTML  ;; ...
  structure JSON ;; ...
  structure List ;; ...
  structure PlainLiteral ;; ...
  structure Property ;; ...
  structure Seq ;; ...
  structure Statement ;; ...
  structure XMLLiteral ;; ...
  structure direction
  structure first ;; ...
  structure langString ;; ...
  structure language ;; ...
  structure nil ;; ...
  structure object ;; ...
  structure predicate ;; ...
  structure rest ;; ...
  structure subject ;; ...
  structure type ;; ...
  structure value ;; ...
end
#+END_SRC

*** The RDF Schema Vocabulary

This module 

#+BEGIN_SRC sdml :noeval :exports code
module rdfs base <http://www.w3.org/2000/01/rdf-schema#> is
  structure Class ;; ...
  structure Container ;; ...
  structure ContainerMembershipProperty  ;; ...
  structure Datatype ;; ...
  structure Literal ;; ...
  structure Resource ;; ...
  structure comment ;; ...
  structure domain ;; ...
  structure isDefinedBy ;; ...
  structure label ;; ...
  structure member ;; ...
  structure range ;; ...
  structure seeAlso ;; ...
  structure subClassOf ;; ...
  structure subPropertyOf ;; ...
end
#+END_SRC

*** Simple Knowledge Organization System Namespace

This module 

#+BEGIN_SRC sdml :noeval :exports code
module skos base <http://www.w3.org/2004/02/skos/core#> is
  structure Collection  ;; ...
  structure Concept ;; ...
  structure ConceptScheme ;; ...
  structure OrderedCollection ;; ...
  structure altLabel ;; ...
  structure broadMatch ;; ...
  structure broader ;; ...
  structure broaderTransitive ;; ...
  structure changeNote ;; ...
  structure closeMatch ;; ...
  structure definition ;; ...
  structure editorialNote ;; ...
  structure exactMatch ;; ...
  structure example ;; ...
  structure hasTopConcept ;; ...
  structure hiddenLabel ;; ...
  structure historyNote ;; ...
  structure inScheme ;; ...
  structure mappingRelation ;; ...
  structure member ;; ...
  structure memberList ;; ...
  structure narrowMatch ;; ...
  structure narrower ;; ...
  structure narrowerTransitive ;; ...
  structure notation ;; ...
  structure note ;; ...
  structure prefLabel ;; ...
  structure related ;; ...
  structure relatedMatch ;; ...
  structure scopeNote ;; ...
  structure semanticRelation ;; ...
  structure topConceptOf ;; ...
end
#+END_SRC

*** The xml Namespace

This module 

#+BEGIN_SRC sdml :noeval :exports code
module xml <http://www.w3.org/XML/1998/namespace> is end
#+END_SRC

*** XML Schema Datatypes

This module 

#+BEGIN_SRC sdml :noeval :exports code
module xsd base <http://www.w3.org/2001/XMLSchema#> is end
#+END_SRC

** Constraint Language Library

Note that all of the predicates, relations, and functions in this section exist within the ~sdml~ module scope but
qualification is optional unless the application is ambiguous in a particular context.

*** The Type ~Type~

*Class: Type*

#+BEGIN_EXAMPLE
def Type(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is a ~Type~, else ~false~.

#+BEGIN_EXAMPLE
def is_unknown(self â†’ _) â†’ boolean
    â‰” Type(self) â‡’ self = sdml:Unknown âˆ¨ is_unknown(type_of(self))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Type) â†’ QualifiedIdentifier
#+END_EXAMPLE

The qualified identifier that names this type. In all cases the module portion of the name will be ~"sdml"~.

example: ~type_of(rentals:Customer) = "sdml:Entity"~

#+BEGIN_EXAMPLE
def type_of(_) â†’ Type
#+END_EXAMPLE

Returns the SDML type of the passed value.

example: ~type_of(rentals:Customer) = sdml:Entity~

*** Equality and Inequality

#+BEGIN_EXAMPLE
def eq(_ _) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the two values are equal, else ~false~.

#+BEGIN_EXAMPLE
def gt(_ _) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the first value is greater than the second, else ~false~.

#+BEGIN_EXAMPLE
def gte(v1 â†’ _ v2 â†’ _) â†’ boolean
    â‰” gt(v1 v2) âˆ¨ eq(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is greater than or equal to the second, else ~false~.

#+BEGIN_EXAMPLE
def lt(v1 â†’ _ v2 â†’ _) â†’ boolean
    â‰” Â¬gte(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is less than the second, else ~false~.

#+BEGIN_EXAMPLE
def lte(v1 â†’ _ v2 â†’ _) â†’ boolean
    â‰” Â¬gt(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is less than or equal to the second, else ~false~.

#+BEGIN_EXAMPLE
def ne(v1 â†’ _ v2 â†’ _) â†’ boolean
    â‰” Â¬eq(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the two values are not equal, else ~false~.

*** Identifiers

*Class: Identifier*

#+BEGIN_EXAMPLE
def Identifier(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Identifier
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Identifier~, else ~false~.

#+BEGIN_EXAMPLE
def join(Identifier Identifer) â†’ QualifiedIdentifier
#+END_EXAMPLE

Return a new qualified identifier with the first parameter as the module name and the second as the member name.

*Class: QualifiedIdentifier*

#+BEGIN_EXAMPLE
def QualifiedIdentifier(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:QualifiedIdentifier
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~QualifiedIdentifier~, else ~false~.

#+BEGIN_EXAMPLE
def member(QualifiedIdentifier) â†’ Identifier
#+END_EXAMPLE

Return the member name part of the identifier.

#+BEGIN_EXAMPLE
def module(QualifiedIdentifier) â†’ Identifier
#+END_EXAMPLE

Return the module name part of the identifier.

*Union: IdentifierReference*

#+BEGIN_EXAMPLE
def IdentifierReference(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:IdentiferReference
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~IdentifierReference~, else ~false~.

#+BEGIN_EXAMPLE
def as_identifier(IdentifierReference) â†’ {0..1} Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_qualified_identifier(IdentifierReference) â†’ {0..1} QualifiedIdentifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_identifier(IdentifierReference) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_qualified_identifier(IdentifierReference) â†’ boolean
#+END_EXAMPLE

*** Module Definition

*Class: Module*

#+BEGIN_EXAMPLE
def Module(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Module
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Module~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Module) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def base_uri(Module) â†’ {0..1} iri
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def definitions(Module) â†’ {unique 0..} Definition
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def imports(Module) â†’ {unique 0..} ImportStatement
#+END_EXAMPLE

Returns an unordered, unique, sequence of import statements.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Module) â†’ boolean
    â‰” âˆ€ d âˆˆ definitions(self) ( is_complete(d) )
#+END_EXAMPLE

Returns ~true~ if the module definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def name(Module) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def resolved_uri(Module) â†’ iri
#+END_EXAMPLE

*Union: Definition*

#+BEGIN_EXAMPLE
def Definition(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Definition
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Definition~, else ~false~.

#+BEGIN_EXAMPLE
def as_datatype(Definition) â†’ {0..1} Datatype
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_entity(Definition) â†’ {0..1} Entity
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_enumeration(Definition) â†’ {0..1} Enumeration
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_event(Definition) â†’ {0..1} Event
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_structure(Definition) â†’ {0..1} Structure
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_property(Definition) â†’ {0..1} Property
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_datatype(Definition) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_entity(Definition) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_enumeration(Definition) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_event(Definition) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_structure(Definition) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_property(Definition) â†’ boolean
#+END_EXAMPLE

*** Imports

*Class: ImportStatement*

#+BEGIN_EXAMPLE
def ImportStatement(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:ImportStatement
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ImportStatement~, else ~false~.

#+BEGIN_EXAMPLE
def imports(ImportStatement) â†’ {0..} Import
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def member_imports(i â†’ ImportStatement)
    â‰” {i | i âˆˆ imports(i) âˆ§ MemberImport(i)}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def module_imports(i â†’ ImportStatement)
    â‰” {i | i âˆˆ imports(i) âˆ§ ModuleImport(i)}
#+END_EXAMPLE

*Class: Import*

#+BEGIN_EXAMPLE
def Import(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Import
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Import~, else ~false~.

#+BEGIN_EXAMPLE
def is_module_import(Import) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_member_import(Import) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_module_import(Import) â†’ Maybe of ModuleImport
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_member_import(Import) â†’ Maybe of MemberImport
#+END_EXAMPLE

*Class: ModuleImport*

#+BEGIN_EXAMPLE
def ModuleImport(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:ModuleImport
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ModuleImport~, else ~false~.

#+BEGIN_EXAMPLE
def module(ModuleImport) â†’ Identifier
#+END_EXAMPLE

*Class: MemberImport*

#+BEGIN_EXAMPLE
def MemberImport(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:MemberImport
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~MemberImport~, else ~false~.

#+BEGIN_EXAMPLE
def module(MemberImport) â†’ Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def member(MemberImport) â†’ Identifier
#+END_EXAMPLE

*** Datatypes and Values

*Class: Datatype*

#+BEGIN_EXAMPLE
def Datatype(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Datatype
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Datatype~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Module) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def base_type(Datatype) â†’ {0..1} Datatype
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def container(Datatype) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def is_ordinal(Datatype) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed type is an /ordinal type/, else ~false~.

#+BEGIN_EXAMPLE
def name(Datatype) â†’ IdentifierReference
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(c â†’ Constraint) â†’ Identifier
    â‰” join(name(container(c)) name(c))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

*Datatype: decimal*

#+BEGIN_EXAMPLE
def decimal(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~decimal~, else ~false~.

#+BEGIN_EXAMPLE
def whole_part(decimal) â†’ decimal
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def decimal_part(decimal) â†’ decimal
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def round(decimal) â†’ decimal
#+END_EXAMPLE

*Datatype: double*

#+BEGIN_EXAMPLE
def double(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~double~, else ~false~.

#+BEGIN_EXAMPLE
def whole_part(double) â†’ double
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def decimal_part(double) â†’ double
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def round(double) â†’ double
#+END_EXAMPLE

*Datatype: integer*

#+BEGIN_EXAMPLE
def integer(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~integer~, else ~false~.

*Datatype: iri*

#+BEGIN_EXAMPLE
def iri(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~iri~, else ~false~.

#+BEGIN_EXAMPLE
def is_absolute(iri) â†’ boolean
#+END_EXAMPLE

*Datatype: language*

#+BEGIN_EXAMPLE
def language(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~language~, else ~false~.

#+BEGIN_EXAMPLE
def broader(languageTag languageTag) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def language_extended_part(languageTag) â†’ string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def language_part(languageTag) â†’ string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def narrower(languageTag languageTag) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def region_part(languageTag) â†’ string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def script_part(languageTag) â†’ string
#+END_EXAMPLE

*Datatype: string*

#+BEGIN_EXAMPLE
def string(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~string~, else ~false~.

#+BEGIN_EXAMPLE
def contains(string sub â†’ string) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the value of the second string is contained within the first, else ~false~.

#+BEGIN_EXAMPLE
def eq_ci(string string) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def into_list(string) â†’ {ordered 0..} unsigned
#+END_EXAMPLE

Returns a new list where each element is the Unicode code-point of a character in the input string.

#+BEGIN_EXAMPLE
def join(string string) â†’ string
#+END_EXAMPLE

Return a new string which is the concatenation of the two input strings.

#+BEGIN_EXAMPLE
def language_part(string) â†’ Maybe of language
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def length(string) â†’ integer
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def matches(string regex â†’ string) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def ne_ci(string string) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def prefix(string prefix â†’ string) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the first string starts with the value of the second, else ~false~.

#+BEGIN_EXAMPLE
def quoted_part(string) â†’ string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def suffix(string suffix â†’ string) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the first string ends with the value of the second, else ~false~.

*Datatype: unsigned*

#+BEGIN_EXAMPLE
def unsigned(_) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~unsigned~, else ~false~.

#+BEGIN_EXAMPLE
def into_integer(unsigned) â†’ integer
#+END_EXAMPLE

*** <<seq:library-sequence-types>>Sequence Types

*Class: Sequence*

#+BEGIN_EXAMPLE
def Sequence(self â†’ {_}) â†’ boolean
    â‰” type_of(self) = sdml:Sequence
#+END_EXAMPLE

Returns ~true~ if the value is of type ~Sequence~ or any sub-type of ~Sequence~, else ~false~.

#+BEGIN_EXAMPLE
def contains(s â†’ {_} t â†’ _) â†’ boolean
    â‰” Â¬is_empty({ e | e âˆˆ s âˆ§ e = t})
#+END_EXAMPLE

Returns ~true~ if the sequence ~s~ contains the element ~t~, else ~false~.

#+BEGIN_EXAMPLE
def count({_}) â†’ unsigned
#+END_EXAMPLE

Returns the number of elements in the sequence.

#+BEGIN_EXAMPLE
def element_type({_}) â†’ Type
#+END_EXAMPLE

Returns the type of the members within this sequence.

#+BEGIN_EXAMPLE
def into_bag(seq â†’ {_}) â†’ {0..} _
#+END_EXAMPLE

Transforms the input sequence into a ~Bag~, this *may* remove ordering and uniqueness constraints from the input sequence
but *will not* remove any elements.

#+BEGIN_EXAMPLE
def into_list(seq â†’ {_}) â†’ {ordered nonunique 0..} _
#+END_EXAMPLE

Transforms the input sequence into a ~List~, this *may* add ordering and remove uniqueness constraints from the input sequence
but *will not* remove any elements.

#+BEGIN_EXAMPLE
def into_ordered_set(seq â†’ {_}) â†’ {ordered unique 0..} _
#+END_EXAMPLE

Transforms the input sequence into a ~OrderedSet~, this *may* add both ordering and uniqueness constraints to the input sequence
and *will* remove duplicate elements.

#+BEGIN_EXAMPLE
def into_set({_}) â†’ {unordered unique 0..} _
#+END_EXAMPLE

Transforms the input sequence into a ~Set~, this *may* remove ordering and add uniqueness constraints to the input sequence
and *will* remove duplicate elements.

#+BEGIN_EXAMPLE
def is_empty(seq â†’ {_}) â†’ boolean
    â‰” count(seq) = 0
#+END_EXAMPLE

Return ~true~ if the sequence has no elements, else ~false~.

#+BEGIN_EXAMPLE
def is_ordered(t â†’ {_}) â†’ boolean
    â‰” fold_head(lte t)
#+END_EXAMPLE

Returns ~true~ if the provided type ~t~ is an ordered sequence, else ~false~.

#+BEGIN_EXAMPLE
def is_unique(t â†’ {_}) â†’ boolean
    â‰” count(t) == count(fold(âˆ… union t))
#+END_EXAMPLE

Returns ~true~ if the provided type ~t~ is a sequence that guarantees uniqueness of elements, else ~false~.

#+BEGIN_EXAMPLE
def join({_} sep â†’ string) â†’ string
#+END_EXAMPLE

Return a new string where the string form of each value in the sequence is concatenated with the value of the string
placed between each.

Example: ~join([1 2 3] ",") = "1,2,3"~

*Class: List*

Returns ~true~ if the passed value is of type ~List~, else ~false~.

#+BEGIN_EXAMPLE
def drop({ordered nonunique 0..} _ count â†’ unsigned) â†’ List of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def get({ordered nonunique 0..} _ index â†’ unsigned) â†’ _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def order({ordered nonunique 0..} _) â†’ List of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def reverse({ordered nonunique 0..} _) â†’ List of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def slice({ordered nonunique 0..} _ start â†’ unsigned count â†’ unsigned) â†’ List of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def take({ordered nonunique 0..} _ count â†’ unsigned) â†’ List of _
#+END_EXAMPLE

*Class: OrderedSet*

#+BEGIN_EXAMPLE
drop({ordered unique 0..}  _ count â†’ unsigned) â†’ {ordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
get({ordered unique 0..} _ index â†’ unsigned) â†’ _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
intersection(lhs â†’ {ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ OrderedSet of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_subset(lhs â†’ {ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ boolean
    â‰” is_subset(lhs rhs) âˆ§ Â¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_superset(lhs â†’ {ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ boolean
    â‰” is_superset(lhs rhs) âˆ§ Â¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_subset(lhs â†’ {ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_superset(lhs â†’ {ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
minus(lhs â†’ {ordered unique 0..} _ rhs â†’ OrderedSet of _) â†’ {ordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
reverse({ordered unique 0..} _) â†’ {ordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
slice({ordered unique 0..} _ start â†’ unsigned count â†’ unsigned) â†’ {ordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
take({ordered unique 0..} _ count â†’ unsigned) â†’ {ordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
union({ordered unique 0..} _ rhs â†’ {ordered unique 0..} _) â†’ {ordered unique 0..} _
#+END_EXAMPLE

*Class: Set*

#+BEGIN_EXAMPLE
intersection(lhs â†’ {unordered unique 0..} _ rhs â†’ Set of _) â†’ {unordered unique 0..} _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_subset(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ boolean
    â‰” is_subset(lhs rhs) âˆ§ Â¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_superset(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ boolean
    â‰” is_superset(lhs rhs) âˆ§ Â¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_subset(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_superset(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
minus(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ Set of _
#+END_EXAMPLE

#+BEGIN_EXAMPLE
union(lhs â†’ {unordered unique 0..} _ rhs â†’ {unordered unique 0..} _) â†’ {unordered unique 0..} _
#+END_EXAMPLE

*** Annotations

*Class Annotation*

#+BEGIN_EXAMPLE
def Annotation(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Annotation
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Annotation~, else ~false~.

#+BEGIN_EXAMPLE
def as_annotation_property(Annotation) â†’ {0..1} AnnotationProperty
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_constraint(Annotation) â†’ {0..1} Constraint
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_annotation_property(Annotation) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_constraint(Annotation) â†’ boolean
#+END_EXAMPLE

*Class AnnotationProperty*

#+BEGIN_EXAMPLE
def AnnotationProperty(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:AnnotationProperty
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~AnnotationProperty~, else ~false~.

#+BEGIN_EXAMPLE
def container(Member) â†’ ModelElement
#+END_EXAMPLE

Returns the model element that contains this annotation assertion.

#+BEGIN_EXAMPLE
def name(AnnotationProperty) â†’ IdentiferReference
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def value(AnnotationProperty) â†’ Value
#+END_EXAMPLE

*Class Constraint*

#+BEGIN_EXAMPLE
def Constraint(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Constraint
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Constraint~, else ~false~.

#+BEGIN_EXAMPLE
def as_formal(Constraint) â†’ {0..1} FormalConstraint
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_informal(Constraint) â†’ {0..1} string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def container(Member) â†’ ModelElement
#+END_EXAMPLE

Returns the model element that contains this annotation assertion.

#+BEGIN_EXAMPLE
def is_formal(Constraint) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_informal(Constraint) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Constraint) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

*Annotation Collections*

#+BEGIN_EXAMPLE
def annotation_properties(as â†’ {0..} Annotation)
    â‰” {a | a âˆˆ as âˆ§ AnnotationProperty(a)}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def constraints(as - > {0..} Annotation)
    â‰” {a | a âˆˆ as âˆ§ Constraint(a)}
#+END_EXAMPLE

*** Structured Type Members

*Class: Member*

#+BEGIN_EXAMPLE
def Member(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Member
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Member~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Member) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Member) â†’ Type
#+END_EXAMPLE

Returns the container type that contains this member's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Member) â†’ boolean
    â‰” Â¬Unknown(type_of(self))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Member) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def target_type(Member) â†’ Type
#+END_EXAMPLE

*Class: IdentityMember*

#+BEGIN_EXAMPLE
def IdentityMember(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:IdentityMember
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~IdentityMember~, else ~false~.

*Class: ByReferenceMember*

#+BEGIN_EXAMPLE
def ByReferenceMember(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:ByReferenceMember
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ByReferenceMember~, else ~false~.

*Class: ByValueMember*

#+BEGIN_EXAMPLE
def ByValueMember(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:ByValueMember
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ByValueMember~, else ~false~.

*Class: Cardinality*

#+BEGIN_EXAMPLE
def Cardinality(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Cardinality
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Cardinality~, else ~false~.

#+BEGIN_EXAMPLE
def is_optional(c â†’ Cardinality) â†’ boolean
    â‰” min(c) = 0 âˆ§ eq(max(c) 1)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_range(Cardinality) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_range_unbounded(c â†’ Cardinality) â†’ boolean
    â‰” is_range(c) âˆ§ is_empty(max(c))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def max(Cardinality) â†’ {0..} unsigned
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def min(Cardinality) â†’ unsigned
#+END_EXAMPLE

*** Entities

*Class: Entity*

#+BEGIN_EXAMPLE
def Entity(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Entity
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Entity~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Entity) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Entity) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def flat_members(Entity) â†’ {ordered unique 0..} EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the entity.

#+BEGIN_EXAMPLE
def groups(Entity) â†’ {ordered unique 0..} EntityGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the entity.

#+BEGIN_EXAMPLE
def identity(Entity) â†’ IdentityMember
#+END_EXAMPLE

Returns the identity member for this entity.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Structure) â†’ boolean
    â‰” has_body(self)
    âˆ§ âˆ€ member âˆˆ flat_members(self) (is_complete(member))
#+END_EXAMPLE

Returns ~true~ if the entity definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def members(Entity) â†’ {ordered unique 0..} EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the entity.

#+BEGIN_EXAMPLE
def name(Entity) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(self â†’ Constraint) â†’ Identifier
    â‰” join(name(container(self)) name(self))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

*Class: EntityGroup*

#+BEGIN_EXAMPLE
def EntityGroup(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:EntityGroup
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~EntityGroup~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(EntityGroup) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(EntityGroup) â†’ Entity
#+END_EXAMPLE

Returns the entity that contains group's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Structure) â†’ boolean
    âˆ€ member âˆˆ members(self) (is_complete(member))
#+END_EXAMPLE

Returns ~true~ if the entity group is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def members(EntityGroup) â†’ {ordered unique 0..} EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

*Union: EntityMember*

#+BEGIN_EXAMPLE
def EntityMember(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:EntityMember
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~EntityMember~, else ~false~.

#+BEGIN_EXAMPLE
def as_by_reference(EntityMember) â†’ {0..1} ByReferenceMember
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_by_value(EntityMember) â†’ {0..1} ByValueMember
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_by_reference(EntityMember) â†’ boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_by_value(EntityMember) â†’ boolean
#+END_EXAMPLE

*** Entity Events

*Class: Event*

#+BEGIN_EXAMPLE
def Event(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Event
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Event~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Event) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Event) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def flat_members(Event) â†’ {ordered unique 0..} ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the event.

#+BEGIN_EXAMPLE
def groups(Event) â†’ {ordered unique 0..} StructureGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of groups contained within the event.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Event) â†’ boolean
    â‰” has_body(self)
    âˆ§ âˆ€ member âˆˆ flat_members(self) (is_complete(member))
#+END_EXAMPLE

Returns ~true~ if the structure definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def members(Event) â†’ {ordered unique 0..} ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the event.

#+BEGIN_EXAMPLE
def name(Event) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(c â†’ Constraint) â†’ Identifier
    â‰” join(name(container(c)) name(c))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

#+BEGIN_EXAMPLE
def source(Event) â†’ IdentifierReference
#+END_EXAMPLE

*** Enumerations

*Class: Enumeration*

#+BEGIN_EXAMPLE
def Enumeration(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Enumeration
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Enumeration~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Enumeration) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Enumeration) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Enumeration) â†’ boolean
    â‰” has_body(self)
#+END_EXAMPLE

Returns ~true~ if the enumeration definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def name(Enumeration) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(self â†’ Constraint) â†’ Identifier
    â‰” join(name(container(self)) name(self))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

#+BEGIN_EXAMPLE
def variants(Enumeration) â†’ {ordered unique 1..} ValueVariant
#+END_EXAMPLE

Returns an ordered, unique, sequence of variants contained within the enumeration.

*Class: ValueVariant*

#+BEGIN_EXAMPLE
def ValueVariant(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:ValueVariant
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ValueVariant~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(ValueVariant) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(ValueVariant) â†’ Enumeration
#+END_EXAMPLE

Returns the enumeration that contains this variant's definition.

#+BEGIN_EXAMPLE
def name(ValueVariant) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def value(ValueVariant) â†’ integer
#+END_EXAMPLE

*** Structures

*Class: Structure*

#+BEGIN_EXAMPLE
def Structure(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Structure
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Structure~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Structure) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Structure) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def flat_members(Structure) â†’ {unique 0..} ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure and all of it's groups.

#+BEGIN_EXAMPLE
def groups(Structure) â†’ {ordered unique 0..} StructureGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of groups contained within the structure.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Structure) â†’ boolean
    â‰” has_body(self)
    âˆ§ âˆ€ member âˆˆ flat_members(self) (is_complete(member))
#+END_EXAMPLE

Returns ~true~ if the structure definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def members(Structure) â†’ {ordered unique 0..} ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure.

#+BEGIN_EXAMPLE
def name(Structure) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(self â†’ Structure) â†’ Identifier
    â‰” join(name(container(self)) name(self))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

*Class: StructureGroup*

#+BEGIN_EXAMPLE
def StructureGroup(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:StructureGroup
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~StructureGroup~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(StructureGroup) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(StructureGroup) â†’ Structure
#+END_EXAMPLE

Returns the structure that contains this group's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ StructureGroup) â†’ boolean
    â‰” âˆ€ member âˆˆ members(self) (is_complete(member))
#+END_EXAMPLE

Returns ~true~ if the structure group is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def members(StructureGroup) â†’ {ordered unique 0..} ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure group.

*** Disjoint Unions

*Class: Union*

#+BEGIN_EXAMPLE
def Union(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Union
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Union~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Union) â†’ Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Union) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Union) â†’ boolean
    â‰” has_body(self)
#+END_EXAMPLE

Returns ~true~ if the union definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def name(Union) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(self â†’ Union) â†’ Identifier
    â‰” join(name(container(self)) name(self))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

#+BEGIN_EXAMPLE
def variants(Union) â†’ {unique 0..} TypeVariant
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

*Class: TypeVariant*

#+BEGIN_EXAMPLE
def TypeVariant(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:TypeVariant
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~TypeVariant~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(TypeVariant) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(TypeVariant) â†’ Union
#+END_EXAMPLE

Returns the union that contains this variant's definition.

#+BEGIN_EXAMPLE
def is_renamed(PropertyRole) â†’ boolean
#+END_EXAMPLE

Returns ~true~ if variant has a rename clause, else ~false~.

#+BEGIN_EXAMPLE
def name(TypeVariant) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element, this identifier *must* refer to a type definition.

#+BEGIN_EXAMPLE
def renamed_as(PropertyRole) â†’ {0..1} Identifier
#+END_EXAMPLE

Returns the identifier representing the new name of the variant.

*** Property Definitions

*Class: Property*

#+BEGIN_EXAMPLE
def Property(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:Property
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~Property~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(Property) â†’ {0..} Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(Property) â†’ Module
#+END_EXAMPLE

Returns the module that contains this model element's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ Property) â†’ boolean
    â‰” self.body.present âˆ§ âˆ€ role in self.roles ( role.is_complete )
#+END_EXAMPLE

Returns ~true~ if the property definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def name(Property) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def qualified_name(self â†’ Property) â†’ Identifier
    â‰” join(name(container(self)) name(self))
#+END_EXAMPLE

Return the qualified identifier naming this model element and it's containing module.

#+BEGIN_EXAMPLE
def roles(Property) â†’ {unique 0..} PropertyRole
#+END_EXAMPLE

Returns an unordered set of roles defined within this property.

*Class: Property Role*

#+BEGIN_EXAMPLE
def PropertyRole(self â†’ _) â†’ boolean
    â‰” type_of(self) = sdml:PropertyRole
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~PropertyRole~, else ~false~.

#+BEGIN_EXAMPLE
def annotations(PropertyRole) â†’ Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to this model element.

#+BEGIN_EXAMPLE
def container(PropertyRole) â†’ Property
#+END_EXAMPLE

Returns the property that contains this role's definition.

#+BEGIN_EXAMPLE
def is_complete(self â†’ PropertyRole) â†’ boolean
    â‰” Â¬(type_of(self) = Unknown)
#+END_EXAMPLE

Returns ~true~ if the property role definition is /complete/, else ~false~.

#+BEGIN_EXAMPLE
def name(PropertyRole) â†’ Identifier
#+END_EXAMPLE

Returns the identifier naming this model element.

#+BEGIN_EXAMPLE
def source_cardinality(PropertyRole) â†’ {0..1} Cardinality
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def target_type(PropertyRole) â†’ Type
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def target_cardinality(PropertyRole) â†’ Cardinality
#+END_EXAMPLE

*** Formal Constraints

TBD

*Class: FormalConstraint*

#+BEGIN_EXAMPLE
def FormalConstraint(_) â†’ boolean
    â‰” type_of(self) = sdml:FormalConstraint
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~FormalConstraint~, else ~false~.

#+BEGIN_EXAMPLE
def environment(FormalConstraint) â†’ {0..1} ConstraintEnvironment
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def sentence(FormalConstraint) â†’ ConstraintSentence
#+END_EXAMPLE

*** Constraint Sentences

*Class: AtomicSentence*

TBD

#+BEGIN_EXAMPLE
def predicate(AtomicSentence) â†’ Term
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def arguments(AtomicSentence) â†’ {ordered 0..} Term
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def arity(AtomicSentence) â†’ unsigned
#+END_EXAMPLE

*Union: BindingFromSequence*

TBD

*Class: BindingFromType*

TBD

*Union: BindingTarget*

TBD

*Enumeration: BinaryOperation*

TBD

#+BEGIN_EXAMPLE
BinaryOperation::Conjunction = 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
BinaryOperation::Disjunction = 2
#+END_EXAMPLE

#+BEGIN_EXAMPLE
BinaryOperation::ExclusiveDisjunction = 3
#+END_EXAMPLE

#+BEGIN_EXAMPLE
BinaryOperation::Implication = 4
#+END_EXAMPLE

#+BEGIN_EXAMPLE
BinaryOperation::Biconditional = 5
#+END_EXAMPLE

*Class: BinarySentence*

TBD

*Union: BooleanSentence*

TBD

*Union: ConstraintSentence*

TBD

*Class: EquationSentence*

TBD

#+BEGIN_EXAMPLE
def left_hand_side(EquationSentence) â†’ Term
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def right_hand_side(EquationSentence) â†’ Term
#+END_EXAMPLE

*Class: Negation*

TBD

*Union: QuantifiedSentence*

TBD

*Class: QuantifierBinding*

TBD

*Enumeration: QuantifierKind*

#+BEGIN_EXAMPLE
QuantifierKind::Existential = 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
QuantifierKind::Universal = 2
#+END_EXAMPLE

*Union: SimpleSentence*

TBD

*** Constraint Terms

*Class: BinaryExpression*

TBD

*Union: BooleanExpression*

TBD

*Union: Expression*

TBD

*Class: ExpressionBinding*

TBD

*Class: ExpressionNegation*

TBD

*Class: FunctionalTerm*

TBD

#+BEGIN_EXAMPLE
def arity(FunctionalTerm) â†’ unsigned
#+END_EXAMPLE


*Class: ListOfPredicateValues*

TBD

*Class: NamePath*

TBD

*Union: PredicateValue*

TBD

*Union: ReturnValues*

TBD

*Class: SequenceComprehension*

TBD

*Union: Term*

TBD

*** Constraint Environment

*Class: ConstraintEnvironment*

#+BEGIN_EXAMPLE
def ConstraintEnvironment(_) â†’ boolean
    â‰” type_of(self) = sdml:ConstraintEnvironment
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~ConstraintEnvironment~, else ~false~.

#+BEGIN_EXAMPLE
def bindings(ConstraintEnvironment) â†’ {ordered 0..} EnvironmentBinding
#+END_EXAMPLE

*Class: CollectionType*

#+BEGIN_EXAMPLE
def CollectionType(_) â†’ boolean
    â‰” type_of(self) = sdml:CollectionType
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~CollectionType~, else ~false~.

#+BEGIN_EXAMPLE
def sequence(CollectionType) â†’ Type
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def element(CollectionType) â†’ {0..1} Type
#+END_EXAMPLE

*Class: EnvironmentBinding*

#+BEGIN_EXAMPLE
def EnvironmentBinding(_) â†’ boolean
    â‰” type_of(self) = sdml:EnvironmentBinding
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~EnvironmentBinding~, else ~false~.

#+BEGIN_EXAMPLE
def arity(EnvironmentBinding) â†’ unsigned
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(EnvironmentBinding) â†’ Identifer
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def signature(EnvironmentBinding) â†’ {0..1} FunctionSignature
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def body(EnvironmentBinding) â†’ EnvironmentBindingValue
#+END_EXAMPLE

*Union: EnvironmentBindingValue*

#+BEGIN_EXAMPLE
def EnvironmentBindingValue(_) â†’ boolean
    â‰” type_of(self) = sdml:EnvironmentBindingValue
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~EnvironmentBindingValue~, else ~false~.

TBD

*Class: FunctionParameter*

#+BEGIN_EXAMPLE
def FunctionParameter(_) â†’ boolean
    â‰” type_of(self) = sdml:FunctionParameter
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~FunctionParameter~, else ~false~.

#+BEGIN_EXAMPLE
def name(FunctionParameter) â†’ {0..1} Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def type(FunctionParameter) â†’ FunctionType
#+END_EXAMPLE

*Class: FunctionSignature*

#+BEGIN_EXAMPLE
def FunctionSignature(_) â†’ boolean
    â‰” type_of(self) = sdml:FunctionSignature
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~FunctionSignature~, else ~false~.

#+BEGIN_EXAMPLE
def arity(FunctionSignature) â†’ unsigned
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def parameters(FunctionSignature) â†’ {ordered 1..} FunctionParameter
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def type(FunctionSignature) â†’ FunctionType
#+END_EXAMPLE

*Union: FunctionType*

#+BEGIN_EXAMPLE
def FunctionType(_) â†’ boolean
    â‰” type_of(self) = sdml:FunctionType
#+END_EXAMPLE

Returns ~true~ if the passed value is of type ~FunctionType~, else ~false~.

TBD

 
