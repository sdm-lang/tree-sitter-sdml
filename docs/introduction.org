#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Introduction

The Simple Domain Modeling Language[fn:sdml] is a small data-oriented language for constructing, documenting, and
reasoning about a conceptual domain model. For a background on domain modeling see section [[sec:domain-modeling]]. At it's
core SDML comprises *1.* an /Semantic Model/ whose structure and semantics are described in RDF[fn:rdf] by an OWL[fn:owl]
ontology (see section [[sec:rdf-semantic-model]] for more details), and *2.* a /surface syntax/ for editing and sharing model
artifacts (see section [[sec:surface-syntax]] for more details). Figure [[fig:sdml-overview]] shows the relationship between
these high-level components.

This document covers both the semantic model and surface syntax representation as well as the correspondence between
them. However, the primary focus of the documentation is the surface syntax as most users will be interacting with it
alone.

#+NAME: fig:sdml-overview
#+BEGIN_SRC dot :file sdml-overview.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  instance [shape="note"; label="My Domain\nModel"];
  sdml [shape="ellipse"; label="Surface\nSyntax"];  
  semantics [shape="ellipse"; label="Semantic\nModel"];
  rdf [shape="ellipse"; label="RDF/OWL"];

  instance -> sdml [arrowhead="open"; label="expressed-in"];
  sdml -> semantics [arrowhead="open"; label="conforms-to"];
  semantics -> rdf [arrowhead="open"; label="expressed-in"];
}
#+END_SRC

#+CAPTION: Model Overview
#+RESULTS: fig:sdml-overview
[[file:sdml-overview.svg]]

The language uses some ideas from UML[fn:uml] which is often used in the construction of such models today. However, the goal is
to keep the language as small as possible, taking away some options where they don't make sense or where their use may
distract from the major purpose of the model. The model also takes some of the language from Domain-Driven Design (DDD)[fn:ddd],
namely the separation of entities (/an object defined not by its attributes, but its identity/) from value objects (/an
immutable object that contains attributes but has no conceptual identity/), simply termed structures in SDML. This model
does not include the following DDD as first-class concepts: /aggregates/, /repositories/, /factories/, or /services/.

** <<sec:domain-modeling>> Domain Modeling

Domain modeling is the process by which we develop a model of our business domain. In particular, we model /what/ our
business does and not /how/ it is done. 

There is often confusion around the use of the term /Domain Model/ especially in regard to terms such as /Data Model/, /Class
Model/, /Schema/ and more. The rest of this section is an attempt to clarify the terminology and how the relevant modeling
efforts are undertaken. This is not intended as an exhaustive review of modelling approaches, standards, or technologies
and neither does it make any judgement as to the usefulness of any approach or technology.

*** Model Terminology

A model is an informative representation of an object, person or system. The term originally denoted the plans of a
building in late 16th-century English, and derived via French and Italian ultimately from Latin modulus, a measure. As
is common in software development the term model is overloaded and it's use can lead to confusion as people have
different expectations and assumptions regarding what kind of model is being discussed. To this end we introduce some
terminology here that, if simply used as model qualifiers, helps to disambiguate the purpose of any particular model.

For now we will use the following classification to partition the major purpose of different model instances.

- *Data*: A data model in software engineering is a representation of concepts and the relationships, constraints, rules,
  and operations to specify data semantics for a chosen domain of discourse. Typically it specifies relations between
  kinds of things, but may also include relations with individual things. It can provide sharable, stable, and organized
  structure of information requirements or knowledge for the domain context.
- *Behavior*: Behavioral languages are designed to describe the observable behavior of complex systems consisting of
  components that execute concurrently. These languages focus on the description of key concepts such as: concurrency,
  nondeterminism, synchronization, and communication.
- *Process*: [Business] process modeling (BPM) in business process management and systems engineering is the activity of
  representing processes of an enterprise, so that the current business processes may be analyzed, improved, and
  automated.

A common framework for defining the /level/ of abstraction inherent to a model are the three /perspectives/
introduced by ANSI in 1975 (introduced in section [[sec:sdml-role]].

- *Conceptual*: In the field of computer science a conceptual model aims to express the meaning of terms and concepts used
  by domain experts to discuss the problem, and to find the correct relationships between different concepts. The
  conceptual model attempts to clarify the meaning of various, usually ambiguous terms, and ensure that confusion caused
  by different interpretations of the terms and concepts cannot occur.
- *Logical*: A logical data model or logical schema is a data model of a specific problem domain expressed independently
  of a particular database management product or storage technology (physical data model) but in terms of data
  structures such as relational tables and columns, object-oriented classes, or XML tags. This is as opposed to a
  conceptual data model, which describes the semantics of an organization without reference to technology.
- *Physical*: A physical data model (or database design) is a representation of a data design as implemented, or intended
  to be implemented, in a database management system. In the lifecycle of a project it typically derives from a logical
  data model, though it may be reverse-engineered from a given database implementation.
  
With these two classifications we can construct a simple grammar for the qualification of the term /model/:

#+BEGIN_SRC ebnf
Perspective    = "conceptual" | "logical" | "physical"

Scope          = "data" | "behavior" | "process"

ModelReference = Perspective, Scope "model"
#+END_SRC

*** Modeling Language/Notation

There have been a number of modeling techniques, notations, and languages over the years. The following table describes
those in common use today. It is worth noting that after OMG standardization there are common meta-model underpinnings
for UML and BPMN.

|            | *Data*                            | *Behavior*                     | *Process*          |
| *Conceptual* | UML^1, Concept Map, Semantic Net | UML^2, Flowchart              | UML^3, BPMN, EPC^4 |
| *Logical*    | UML^1, EXPRESS, IDEF1X, IE^5      | UML^2                         | BPMN             |
| *Physical*   | UML^1, â€¦                         | UML^6, Statecharts, Petri net |                  |

1. Class and Component diagrams.
2. Sequence, State, and Activity diagrams.
3. Use Case and Activity diagrams.
4. Event-driven Process Chains.
5. Information Engineering (IE) introduced the commonly used /crows-foot/ notation.
6. Action Semantics and action languages.

UML has a built-in extension mechanism with /stereotypes/ and /profiles/ and data modeling concerns are often introduced
with specific extensions such as stereotypes for different key types. 

*** Modeling Themes

(*TODO*: Complete this section)

Commonality

Variability

- *Inheritence* :: ...
- Interface and Implementation :: ...
-

Scope: Breadth and Depth

*** Domain-Driven Design

Domain-driven design (DDD) is a software design approach focusing on modeling software to match a domain according to
input from that domain's experts. Under domain-driven design, the structure and language of software code (class names,
class methods, class variables) should match the business domain.

Within this approach the /domain/ model is usually a conceptual or logical data model that describes the key entities
that comprise the domain. The representation of this model can be any of the languages described above although UML is
the common. The discipline of domain modeling is unique in it's focus on deriving data/information models directly from
the business and stresses the involvement of domain experts from the business in the development of models. Additionally
the literature describes specific kinds of model entities and their unique semantics, /Entities/, /Value Objects/, /Events/,
and /Aggregates/, etc. which help focus conversations on key modeling concepts such as identity, lifecycle, and ownership.

Thus, a *Domain Model* is a /conceptual/ (UML or Ontology) or /logical/ (UML) /data model/ developed according to a specific
methodology (DDD) and employing a specific meta-language (UML Profile).

Some of the defined kinds, /Repository/, /Factory/, and /Service/ are lower-level concerns and the lack of a clear separation
between different levels of abstraction is one criticism of the method. Additionally terms such as Entity as defined by
DDD are not entirely compatible with the use in pre-existing methods such as E/R modeling.

However, the method's focus on the business and it's vocabulary as the basis for models is valuable in an effort such as
the Universal API where the model will represent our business model in different presentations.

** Domain-Related Models

Domain modeling is often an isolated activity in that the created model is applied in a singular fashion. However,
there are other modeling activities that share similar aims, whose subjects intersect, and which are also conceptual or
logical data models. Two commonly developed artifacts are:

- *Data Catalogs* :: These models describe data in data stores (although they don't have to) and describe tables and
  similar structures comprised of data elements. The set of data element definitions, commonly referred to as a data
  dictionary, go beyond simple data typing to include privacy, security, governance, lineage, and provenance
  classification.
- *Business Glossaries* :: These models have 

Table [[tbl:domain-related-models]] contains a summary of characteristics of these two artifacts compared to a domain model.
Note that the column "Open/Closed"captures the /World Assumption/ of typical artifacts/processes/products in each row
-- see section [[sec:rdf-semantic-model]] for more information. 

#+NAME: tbl:domain-related-models
#+CAPTION: Domain-Related Model Summary
|                   | Primary          | Secondary              | Open/Closed |
|-------------------+------------------+------------------------+-------------|
| Data Dictionary   | Data Element     | Table, Dataset, Job    | Semi-Closed |
| Business Glossary | Vocabulary, Term | Relations, Labels      | Closed      |
| Domain Model      | Entities         | Structures             | Closed      |
| SDML Domain Model | Entities         | Properties, Structures | Open        |

Given that 

#+NAME: fig:sdml-foundation
#+BEGIN_SRC dot :file sdml-foundation.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  sdml [shape="rect"; label="SDML"];
  catalog [shape="rect"; label="Data\nCatalog"];  
  glossary [shape="rect"; label="Business\nGlossary"];
  foundation [shape="rect"; width=3.5; label="Common Foundation (RDF/OWL)"];

  sdml -> foundation [arrowhead="open"];
  catalog -> foundation [arrowhead="open"];
  glossary -> foundation [arrowhead="open"];
}
#+END_SRC

#+CAPTION: Model Foundations
#+RESULTS: fig:sdml-foundation
[[file:sdml-foundation.svg]]

** <<sec:sdml-role>> Domain Modeling's Role in Development

The software development process may be described as the management of abstraction; requirements are an abstraction
representing actual needs of some group of individuals, a whiteboard drawing may be an (informal) abstraction of a
system design, a UML model may be a formal abstraction of system or component dependencies, and so forth. We can
stratify these levels of abstraction as shown in figure [[fig:artifact-layering]] although almost any such stratification
will crash headlong into any number of detractors.

#+NAME: fig:artifact-layering
#+BEGIN_SRC dot :file artifact-layering.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  fontname="Helvetica,Arial,sans-serif";
  node [shape="rect"; width=1.5; fontname="Helvetica,Arial,sans-serif"; fontsize=10];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];
  
  subgraph cluster_0 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Abstract Models";
    margin=12.0;

    concept  [label="Conceptual Models\n(e.g. concept maps)"];
    logical  [label="Logical Models\n(e.g. UML)"];
    
    concept -> logical [arrowhead="open"; xlabel="  transform  "; labeldistance="2.5"];
    logical -> concept [arrowhead="open"; xlabel="  abstract  "; labeldistance="2.5"];
  }
 
  subgraph cluster_1 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Concrete Models";
    margin=12.0;
    
    physical [label="Physical Models\n(e.g. profiled UML)"];  
    develop  [label="Development Artifacts\n(e.g. source, config)"];
    logical -> physical [arrowhead="open"];
    physical -> logical [arrowhead="open"];
    
    physical -> develop [arrowhead="open"; xlabel="  transform  "];
    develop -> physical [arrowhead="open"; xlabel="  abstract  "];
  }
  
  subgraph cluster_2 {
    color="grey";
    fontcolor="grey";
    fontsize=10;
    style="dashed";
    label="Artifacts";
    margin=12.0;
    
    deploy   [shape="component"; label="Deployment Artifacts\n(e.g. executables)"];
    
    develop -> deploy [arrowhead="open"];
    deploy -> develop [arrowhead="open"];
   }
   
}
#+END_SRC

#+CAPTION: Artifact Layers in Software Development
#+RESULTS: fig:artifact-layering
[[file:artifact-layering.svg]]

While this figure groups these levels into three groups, /abstract models/, /concrete models/, and /artifacts/ this is again
somewhat arbitrary given that even the executable deployment artifacts are an abstraction concerning how the operating
system and CPU will layout and execute our application.

Figure [[fig:model-transforms]] demonstrates the key element of a /Model-Driven Development/[fn:mdd] style, namely the
transformation between models and between models and other development artifacts. In this case we use the terms
introduced above where we transform from a /more/ abstract model to a /more/ concrete model or directly to other artifacts.
The transformation also has to have a set of rules that define the selection and projection of elements from the source
model.

#+NAME: fig:model-transforms
#+BEGIN_SRC dot :file model-transforms.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  semantics [shape="ellipse"; label="Abstract\nModel"];
  transform [shape="cds"; margin="0.2,0.2"; label="Transformation"];
  tsq [shape="ellipse"; label="Rules"];
  other [shape="ellipse"; style="dashed"; label="Concrete\nModel(s)"];

  semantics -> transform [label="source"];
  tsq -> transform [label="select/project"];
  transform -> other [label="generate"];
  other -> semantics [label="abstraction"];
}
#+END_SRC

#+CAPTION: Model Transformations
#+RESULTS: fig:model-transforms
[[file:model-transforms.svg]]

*Example:*

In the following example we show a tree of transformations from a domain model through three intermediate models to
various artifacts such as SQL, code, and Thrift[fn:thrift]. 

#+NAME: fig:example-transform
#+BEGIN_SRC dot :file example-transform.svg :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  fontname="Helvetica,Arial,sans-serif";
  node [fontname="Helvetica,Arial,sans-serif"; fontsize=10; width=1.0; height=0.6];
  edge [fontname="Helvetica,Arial,sans-serif"; fontsize=9; fontcolor="darkgrey"];

  domain [shape="ellipse"; label="Domain\nModel"];

  docs [shape="note"; label="Documentation"];
  domain -> docs [label="transform"];

  service [shape="ellipse"; label="Service\nDefinition"; style=dotted;];
  domain -> service [label="transform"];

  smithy [shape="component"; label="Smithy"];
  service -> smithy [label="transform"];
  
  oas [shape="component"; label="OpenAPI Spec\n(YAML)"];
  smithy -> oas [label="transform"];

  stubs [shape="component"; label="Service Stubs\n(code)"];
  smithy -> stubs [label="transform"];

  client [shape="component"; label="Client Library\n(code)"];
  smithy -> client [label="transform"];

  data [shape="ellipse"; label="Data\nDefinition"; style=dotted;];
  domain -> data [label="transform"];

  dbsql [shape="component"; label="SQL DDL"]; 
  data -> dbsql [label="transform"];

  dbjson [shape="component"; label="JSON Schema"];
  data -> dbjson [label="transform"];
  
  message [shape="ellipse"; label="Message\nDefinition"; style=dotted;];
  domain -> message [label="transform"];

  thrift [shape="ellipse"; label="Apache Thrift\n(IDL)"];
  message -> thrift [label="transform"];
}
#+END_SRC

#+CAPTION: Example Model Transformations
#+RESULTS: fig:example-transform
[[file:example-transform.svg]]

** Goals

The purpose of SDML is to be the source of truth concerning the enterprise's domain, and the root of the tree shown in
figure [[fig:example-transform]]. It needs to provide an abstraction that is expressive enough to model the structure of
entities that define the domain, while providing enough detail to be useful in transforming to the next level of more
concrete models and artifacts.

SDML has two key tenets that help in this goal:

1. Provide the ability to capture correct, but /incomplete/ models to allow fast capture of key information first.
2. Provide an extension mechanism that goes beyond marker values and allows semantic extension when necessary.

Additionally, by focusing first on a text-based syntax we provide a resource representation that fits well into most
software processes, it can be version controlled, it's diff-friendly, you can use code-reviews and pull-requests to
build governance processes. While this document /does not/ preclude alternative representations, including visual ones,
the surface syntax is the canonical authoring form.

(*TODO*: Add data dictionary discussion)

(*TODO*: Add vocabulary discussion)

** Non-Goals

(*TODO*: Complete this list)

1. Versioning
2. Object Modeling
3. Behavior Modeling
4. Standardization

# ----- Footnotes

[fn:sdml] Home at [[https://sdml.io/][sdmi.io]], source at [[https://github.com/johnstonskj/tree-sitter-sdml][github.com]]

[fn:owl] [[https://www.w3.org/OWL/][Web Ontology Language (OWL)]], W3C

[fn:uml] [[http://www.uml.org/][The Unified Modeling Language (UML)]], OMG

[fn:rdf] [[https://www.w3.org/RDF/][Resource Description Framework (RDF)]], W3C

[fn:ddd] [[https://en.wikipedia.org/wiki/Domain-driven_design][Domain-Driven Design]], Wikipedia

[fn:mdd] [[https://en.wikipedia.org/wiki/Model-driven_engineering][Model-Driven Development]], Wikipedia

[fn:thrift] [[https://thrift.apache.org/docs/idl][Thrift interface description language]], Apache Software Foundation
