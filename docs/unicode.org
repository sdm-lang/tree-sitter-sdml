#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<app:unicode>>Appendix: Unicode Usage

The grammar for SDML uses a number of Unicode alternative characters for operators, relations, and keywords. Table
[[tbl:unicode-characters]] lists these with their ASCII equivalents. In the case of the /type-of/ relation there are two
Unicode choices where the character ~→~ is usually used for expressing the type of members and function parameters and the
character ~↦~ is usually reserved for mapping types and mapping values.

#+NAME: tbl:unicode-characters
#+CAPTION: Unicode Characters in Grammar
| Operator, Relation, or Keyword | ASCII          | Unicode | Unicode Codepoint | LaTeX                  |
|--------------------------------+----------------+---------+-------------------+------------------------|
| Type-of                        | ~->~             | ~→~ or ~↦~  | =U+2192= or =U+21A6=  | =rightarrow= or =mapsto=   |
| Type Restriction               | ~<-~             | ~←~       | =U+2190=            | =leftarrow=              |
| Defined-as                     | ~:=~             | ~≔~       | =U+2254=            | see notes.             |
| Universal Quantifier           | ~forall~         | ~∀~       | =U+2200=            | =forall=                 |
| Existential Quantifier         | ~exists~         | ~∃~       | =U+2203=            | =exists=                 |
| Sequence Membership            | ~in~             | ~∈~       | =U+2208=            | =in=                     |
| Inequation Relation            | ~/=~             | ~≠~       | =U+2260=            | =neq=                    |
| Less-than or Equal Relation    | ~<=~             | ~≤~       | =U+2264=            | =leq=                    |
| Greater-than or Equal Relation | ~>=~             | ~≥~       | =U+2265=            | =geq=                    |
| Negation                       | ~not~            | ~¬~       | =U+00A5=            | =neg=                    |
| Conjunction                    | ~and~            | ~∧~       | =U+2227=            | =land=                   |
| Disjunction                    | ~or~             | ~∨~       | =U+2228=            | =lor=                    |
| Exclusive Disjunction          | ~xor~            | ~⊻~       | =U+22BB=            | =veebar=                 |
| Implication (Conditional)      | ~implies~ or ~==>~ | ~⇒~       | =U+21D2=            | =implies=                |
| Biconditional                  | ~iff~ or ~<==>~    | ~⇔~       | =U+21D4=            | =iff=                    |
| Empty Sequence                 | ~[]~             | ~∅~       | =U+2205=            | =emptyset= or =varnothing= |
| Truth Value                    | ~true~           | ~⊤~       | =U+22A4=            | =top=                    |
| False Value                    | ~false~          | ~⊥~       | =U+22A5=            | =bot=                    |

*Notes*

In describing the type system for SDML the characters ~⊤~ and ~⊥~ are also used to describe the /type of all things/ and the
/type of no things/ respectively. The grammar does not use these distinctions and the values are only used for boolean
values.

For some entries in the table above there are notation options not supported by SDML. In the following discussion the
value $v$ represents some valid member of the type $T$.

- The /type-of/ relation uses the rightward arrow $v \rightarrow T$, common in programming languages and type theory. SDML chose not
  to use the colon $v : T$ character which is heavily used in programming.
  - Product types $T {\,\mathrel{\mathop:}=\,} T_1 \times T_2 \cdots \times T_n$.
  - Sum types $T {\,\mathrel{\mathop:}=\,} T_1 + T_2 \cdots + T_n$.
  - Functions $(T_1 \times T_2 \cdots \times T_n) → T$
- The /type-restriction/ relation uses the leftward arrow $T_2 ← T_1$ to denote that a type is a sub-type of another by
  restriction.
  - In languages that support sub-type polymorphism the expression is commonly $T_2 \sqsubseteq T_1$ or $T_2 \leq: T_1$.
- The /inequation/ operator uses the slashed equation symbol $v_1 \neq v_2$, or it's ASCII equivalent ~/=~, while some
  programming languages use ~!=~, ~~=~, or ~<>~.
- The unary logical connective /negation/ does not introduce an ASCII symbol such as ~!~ or ~~~ as in some programming
  languages, only the logic symbol $\neg v$.
- Similarly, the binary logical connectives $\{\land,\lor,\veebar,\implies,\iff\}$ do not introduce ASCII symbols from
  programming languages.
- Rendering the /equal by definition/ in LaTeX is best done by using the command =coloneqq= in the =mathtools= package.
